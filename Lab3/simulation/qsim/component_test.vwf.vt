// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2024 01:49:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top_level
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_level_vlg_sample_tst(
	clk,
	global_reset,
	output_sel,
	sampler_tx
);
input  clk;
input  global_reset;
input [2:0] output_sel;
output sampler_tx;

reg sample;
time current_time;
always @(clk or global_reset or output_sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_level_vlg_check_tst (
	branch_offset,
	IMEM_out,
	output_sys,
	rd2,
	REG_write_outp,
	write_data,
	sampler_rx
);
input [31:0] branch_offset;
input [31:0] IMEM_out;
input [7:0] output_sys;
input [7:0] rd2;
input  REG_write_outp;
input [7:0] write_data;
input sampler_rx;

reg [31:0] branch_offset_expected;
reg [31:0] IMEM_out_expected;
reg [7:0] output_sys_expected;
reg [7:0] rd2_expected;
reg  REG_write_outp_expected;
reg [7:0] write_data_expected;

reg [31:0] branch_offset_prev;
reg [31:0] IMEM_out_prev;
reg [7:0] output_sys_prev;
reg [7:0] rd2_prev;
reg  REG_write_outp_prev;
reg [7:0] write_data_prev;

reg [31:0] branch_offset_expected_prev;
reg [31:0] IMEM_out_expected_prev;
reg [7:0] output_sys_expected_prev;
reg [7:0] rd2_expected_prev;
reg  REG_write_outp_expected_prev;
reg [7:0] write_data_expected_prev;

reg [31:0] last_branch_offset_exp;
reg [31:0] last_IMEM_out_exp;
reg [7:0] last_output_sys_exp;
reg [7:0] last_rd2_exp;
reg  last_REG_write_outp_exp;
reg [7:0] last_write_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	branch_offset_prev = branch_offset;
	IMEM_out_prev = IMEM_out;
	output_sys_prev = output_sys;
	rd2_prev = rd2;
	REG_write_outp_prev = REG_write_outp;
	write_data_prev = write_data;
end

// update expected /o prevs

always @(trigger)
begin
	branch_offset_expected_prev = branch_offset_expected;
	IMEM_out_expected_prev = IMEM_out_expected;
	output_sys_expected_prev = output_sys_expected;
	rd2_expected_prev = rd2_expected;
	REG_write_outp_expected_prev = REG_write_outp_expected;
	write_data_expected_prev = write_data_expected;
end



// expected branch_offset[7]
initial
begin
	branch_offset_expected[7] = 1'bX;
end 

// expected branch_offset[6]
initial
begin
	branch_offset_expected[6] = 1'bX;
end 

// expected branch_offset[5]
initial
begin
	branch_offset_expected[5] = 1'bX;
end 

// expected branch_offset[4]
initial
begin
	branch_offset_expected[4] = 1'bX;
end 

// expected branch_offset[3]
initial
begin
	branch_offset_expected[3] = 1'bX;
end 

// expected branch_offset[2]
initial
begin
	branch_offset_expected[2] = 1'bX;
end 

// expected branch_offset[1]
initial
begin
	branch_offset_expected[1] = 1'bX;
end 

// expected branch_offset[0]
initial
begin
	branch_offset_expected[0] = 1'bX;
end 
// expected rd2[ 7 ]
initial
begin
	rd2_expected[7] = 1'bX;
end 
// expected rd2[ 6 ]
initial
begin
	rd2_expected[6] = 1'bX;
end 
// expected rd2[ 5 ]
initial
begin
	rd2_expected[5] = 1'bX;
end 
// expected rd2[ 4 ]
initial
begin
	rd2_expected[4] = 1'bX;
end 
// expected rd2[ 3 ]
initial
begin
	rd2_expected[3] = 1'bX;
end 
// expected rd2[ 2 ]
initial
begin
	rd2_expected[2] = 1'bX;
end 
// expected rd2[ 1 ]
initial
begin
	rd2_expected[1] = 1'bX;
end 
// expected rd2[ 0 ]
initial
begin
	rd2_expected[0] = 1'bX;
end 
// expected output_sys[ 7 ]
initial
begin
	output_sys_expected[7] = 1'bX;
end 
// expected output_sys[ 6 ]
initial
begin
	output_sys_expected[6] = 1'bX;
end 
// expected output_sys[ 5 ]
initial
begin
	output_sys_expected[5] = 1'bX;
end 
// expected output_sys[ 4 ]
initial
begin
	output_sys_expected[4] = 1'bX;
end 
// expected output_sys[ 3 ]
initial
begin
	output_sys_expected[3] = 1'bX;
end 
// expected output_sys[ 2 ]
initial
begin
	output_sys_expected[2] = 1'bX;
end 
// expected output_sys[ 1 ]
initial
begin
	output_sys_expected[1] = 1'bX;
end 
// expected output_sys[ 0 ]
initial
begin
	output_sys_expected[0] = 1'bX;
end 
// expected IMEM_out[ 31 ]
initial
begin
	IMEM_out_expected[31] = 1'bX;
end 
// expected IMEM_out[ 30 ]
initial
begin
	IMEM_out_expected[30] = 1'bX;
end 
// expected IMEM_out[ 29 ]
initial
begin
	IMEM_out_expected[29] = 1'bX;
end 
// expected IMEM_out[ 28 ]
initial
begin
	IMEM_out_expected[28] = 1'bX;
end 
// expected IMEM_out[ 27 ]
initial
begin
	IMEM_out_expected[27] = 1'bX;
end 
// expected IMEM_out[ 26 ]
initial
begin
	IMEM_out_expected[26] = 1'bX;
end 
// expected IMEM_out[ 25 ]
initial
begin
	IMEM_out_expected[25] = 1'bX;
end 
// expected IMEM_out[ 24 ]
initial
begin
	IMEM_out_expected[24] = 1'bX;
end 
// expected IMEM_out[ 23 ]
initial
begin
	IMEM_out_expected[23] = 1'bX;
end 
// expected IMEM_out[ 22 ]
initial
begin
	IMEM_out_expected[22] = 1'bX;
end 
// expected IMEM_out[ 21 ]
initial
begin
	IMEM_out_expected[21] = 1'bX;
end 
// expected IMEM_out[ 20 ]
initial
begin
	IMEM_out_expected[20] = 1'bX;
end 
// expected IMEM_out[ 19 ]
initial
begin
	IMEM_out_expected[19] = 1'bX;
end 
// expected IMEM_out[ 18 ]
initial
begin
	IMEM_out_expected[18] = 1'bX;
end 
// expected IMEM_out[ 17 ]
initial
begin
	IMEM_out_expected[17] = 1'bX;
end 
// expected IMEM_out[ 16 ]
initial
begin
	IMEM_out_expected[16] = 1'bX;
end 
// expected IMEM_out[ 15 ]
initial
begin
	IMEM_out_expected[15] = 1'bX;
end 
// expected IMEM_out[ 14 ]
initial
begin
	IMEM_out_expected[14] = 1'bX;
end 
// expected IMEM_out[ 13 ]
initial
begin
	IMEM_out_expected[13] = 1'bX;
end 
// expected IMEM_out[ 12 ]
initial
begin
	IMEM_out_expected[12] = 1'bX;
end 
// expected IMEM_out[ 11 ]
initial
begin
	IMEM_out_expected[11] = 1'bX;
end 
// expected IMEM_out[ 10 ]
initial
begin
	IMEM_out_expected[10] = 1'bX;
end 
// expected IMEM_out[ 9 ]
initial
begin
	IMEM_out_expected[9] = 1'bX;
end 
// expected IMEM_out[ 8 ]
initial
begin
	IMEM_out_expected[8] = 1'bX;
end 
// expected IMEM_out[ 7 ]
initial
begin
	IMEM_out_expected[7] = 1'bX;
end 
// expected IMEM_out[ 6 ]
initial
begin
	IMEM_out_expected[6] = 1'bX;
end 
// expected IMEM_out[ 5 ]
initial
begin
	IMEM_out_expected[5] = 1'bX;
end 
// expected IMEM_out[ 4 ]
initial
begin
	IMEM_out_expected[4] = 1'bX;
end 
// expected IMEM_out[ 3 ]
initial
begin
	IMEM_out_expected[3] = 1'bX;
end 
// expected IMEM_out[ 2 ]
initial
begin
	IMEM_out_expected[2] = 1'bX;
end 
// expected IMEM_out[ 1 ]
initial
begin
	IMEM_out_expected[1] = 1'bX;
end 
// expected IMEM_out[ 0 ]
initial
begin
	IMEM_out_expected[0] = 1'bX;
end 

// expected REG_write_outp
initial
begin
	REG_write_outp_expected = 1'bX;
end 
// expected write_data[ 7 ]
initial
begin
	write_data_expected[7] = 1'bX;
end 
// expected write_data[ 6 ]
initial
begin
	write_data_expected[6] = 1'bX;
end 
// expected write_data[ 5 ]
initial
begin
	write_data_expected[5] = 1'bX;
end 
// expected write_data[ 4 ]
initial
begin
	write_data_expected[4] = 1'bX;
end 
// expected write_data[ 3 ]
initial
begin
	write_data_expected[3] = 1'bX;
end 
// expected write_data[ 2 ]
initial
begin
	write_data_expected[2] = 1'bX;
end 
// expected write_data[ 1 ]
initial
begin
	write_data_expected[1] = 1'bX;
end 
// expected write_data[ 0 ]
initial
begin
	write_data_expected[0] = 1'bX;
end 
// generate trigger
always @(branch_offset_expected or branch_offset or IMEM_out_expected or IMEM_out or output_sys_expected or output_sys or rd2_expected or rd2 or REG_write_outp_expected or REG_write_outp or write_data_expected or write_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected branch_offset = %b | expected IMEM_out = %b | expected output_sys = %b | expected rd2 = %b | expected REG_write_outp = %b | expected write_data = %b | ",branch_offset_expected_prev,IMEM_out_expected_prev,output_sys_expected_prev,rd2_expected_prev,REG_write_outp_expected_prev,write_data_expected_prev);
	$display("| real branch_offset = %b | real IMEM_out = %b | real output_sys = %b | real rd2 = %b | real REG_write_outp = %b | real write_data = %b | ",branch_offset_prev,IMEM_out_prev,output_sys_prev,rd2_prev,REG_write_outp_prev,write_data_prev);
`endif
	if (
		( branch_offset_expected_prev[0] !== 1'bx ) && ( branch_offset_prev[0] !== branch_offset_expected_prev[0] )
		&& ((branch_offset_expected_prev[0] !== last_branch_offset_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[0] = branch_offset_expected_prev[0];
	end
	if (
		( branch_offset_expected_prev[1] !== 1'bx ) && ( branch_offset_prev[1] !== branch_offset_expected_prev[1] )
		&& ((branch_offset_expected_prev[1] !== last_branch_offset_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[1] = branch_offset_expected_prev[1];
	end
	if (
		( branch_offset_expected_prev[2] !== 1'bx ) && ( branch_offset_prev[2] !== branch_offset_expected_prev[2] )
		&& ((branch_offset_expected_prev[2] !== last_branch_offset_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[2] = branch_offset_expected_prev[2];
	end
	if (
		( branch_offset_expected_prev[3] !== 1'bx ) && ( branch_offset_prev[3] !== branch_offset_expected_prev[3] )
		&& ((branch_offset_expected_prev[3] !== last_branch_offset_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[3] = branch_offset_expected_prev[3];
	end
	if (
		( branch_offset_expected_prev[4] !== 1'bx ) && ( branch_offset_prev[4] !== branch_offset_expected_prev[4] )
		&& ((branch_offset_expected_prev[4] !== last_branch_offset_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[4] = branch_offset_expected_prev[4];
	end
	if (
		( branch_offset_expected_prev[5] !== 1'bx ) && ( branch_offset_prev[5] !== branch_offset_expected_prev[5] )
		&& ((branch_offset_expected_prev[5] !== last_branch_offset_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[5] = branch_offset_expected_prev[5];
	end
	if (
		( branch_offset_expected_prev[6] !== 1'bx ) && ( branch_offset_prev[6] !== branch_offset_expected_prev[6] )
		&& ((branch_offset_expected_prev[6] !== last_branch_offset_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[6] = branch_offset_expected_prev[6];
	end
	if (
		( branch_offset_expected_prev[7] !== 1'bx ) && ( branch_offset_prev[7] !== branch_offset_expected_prev[7] )
		&& ((branch_offset_expected_prev[7] !== last_branch_offset_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[7] = branch_offset_expected_prev[7];
	end
	if (
		( branch_offset_expected_prev[8] !== 1'bx ) && ( branch_offset_prev[8] !== branch_offset_expected_prev[8] )
		&& ((branch_offset_expected_prev[8] !== last_branch_offset_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[8] = branch_offset_expected_prev[8];
	end
	if (
		( branch_offset_expected_prev[9] !== 1'bx ) && ( branch_offset_prev[9] !== branch_offset_expected_prev[9] )
		&& ((branch_offset_expected_prev[9] !== last_branch_offset_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[9] = branch_offset_expected_prev[9];
	end
	if (
		( branch_offset_expected_prev[10] !== 1'bx ) && ( branch_offset_prev[10] !== branch_offset_expected_prev[10] )
		&& ((branch_offset_expected_prev[10] !== last_branch_offset_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[10] = branch_offset_expected_prev[10];
	end
	if (
		( branch_offset_expected_prev[11] !== 1'bx ) && ( branch_offset_prev[11] !== branch_offset_expected_prev[11] )
		&& ((branch_offset_expected_prev[11] !== last_branch_offset_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[11] = branch_offset_expected_prev[11];
	end
	if (
		( branch_offset_expected_prev[12] !== 1'bx ) && ( branch_offset_prev[12] !== branch_offset_expected_prev[12] )
		&& ((branch_offset_expected_prev[12] !== last_branch_offset_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[12] = branch_offset_expected_prev[12];
	end
	if (
		( branch_offset_expected_prev[13] !== 1'bx ) && ( branch_offset_prev[13] !== branch_offset_expected_prev[13] )
		&& ((branch_offset_expected_prev[13] !== last_branch_offset_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[13] = branch_offset_expected_prev[13];
	end
	if (
		( branch_offset_expected_prev[14] !== 1'bx ) && ( branch_offset_prev[14] !== branch_offset_expected_prev[14] )
		&& ((branch_offset_expected_prev[14] !== last_branch_offset_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[14] = branch_offset_expected_prev[14];
	end
	if (
		( branch_offset_expected_prev[15] !== 1'bx ) && ( branch_offset_prev[15] !== branch_offset_expected_prev[15] )
		&& ((branch_offset_expected_prev[15] !== last_branch_offset_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[15] = branch_offset_expected_prev[15];
	end
	if (
		( branch_offset_expected_prev[16] !== 1'bx ) && ( branch_offset_prev[16] !== branch_offset_expected_prev[16] )
		&& ((branch_offset_expected_prev[16] !== last_branch_offset_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[16] = branch_offset_expected_prev[16];
	end
	if (
		( branch_offset_expected_prev[17] !== 1'bx ) && ( branch_offset_prev[17] !== branch_offset_expected_prev[17] )
		&& ((branch_offset_expected_prev[17] !== last_branch_offset_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[17] = branch_offset_expected_prev[17];
	end
	if (
		( branch_offset_expected_prev[18] !== 1'bx ) && ( branch_offset_prev[18] !== branch_offset_expected_prev[18] )
		&& ((branch_offset_expected_prev[18] !== last_branch_offset_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[18] = branch_offset_expected_prev[18];
	end
	if (
		( branch_offset_expected_prev[19] !== 1'bx ) && ( branch_offset_prev[19] !== branch_offset_expected_prev[19] )
		&& ((branch_offset_expected_prev[19] !== last_branch_offset_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[19] = branch_offset_expected_prev[19];
	end
	if (
		( branch_offset_expected_prev[20] !== 1'bx ) && ( branch_offset_prev[20] !== branch_offset_expected_prev[20] )
		&& ((branch_offset_expected_prev[20] !== last_branch_offset_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[20] = branch_offset_expected_prev[20];
	end
	if (
		( branch_offset_expected_prev[21] !== 1'bx ) && ( branch_offset_prev[21] !== branch_offset_expected_prev[21] )
		&& ((branch_offset_expected_prev[21] !== last_branch_offset_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[21] = branch_offset_expected_prev[21];
	end
	if (
		( branch_offset_expected_prev[22] !== 1'bx ) && ( branch_offset_prev[22] !== branch_offset_expected_prev[22] )
		&& ((branch_offset_expected_prev[22] !== last_branch_offset_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[22] = branch_offset_expected_prev[22];
	end
	if (
		( branch_offset_expected_prev[23] !== 1'bx ) && ( branch_offset_prev[23] !== branch_offset_expected_prev[23] )
		&& ((branch_offset_expected_prev[23] !== last_branch_offset_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[23] = branch_offset_expected_prev[23];
	end
	if (
		( branch_offset_expected_prev[24] !== 1'bx ) && ( branch_offset_prev[24] !== branch_offset_expected_prev[24] )
		&& ((branch_offset_expected_prev[24] !== last_branch_offset_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[24] = branch_offset_expected_prev[24];
	end
	if (
		( branch_offset_expected_prev[25] !== 1'bx ) && ( branch_offset_prev[25] !== branch_offset_expected_prev[25] )
		&& ((branch_offset_expected_prev[25] !== last_branch_offset_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[25] = branch_offset_expected_prev[25];
	end
	if (
		( branch_offset_expected_prev[26] !== 1'bx ) && ( branch_offset_prev[26] !== branch_offset_expected_prev[26] )
		&& ((branch_offset_expected_prev[26] !== last_branch_offset_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[26] = branch_offset_expected_prev[26];
	end
	if (
		( branch_offset_expected_prev[27] !== 1'bx ) && ( branch_offset_prev[27] !== branch_offset_expected_prev[27] )
		&& ((branch_offset_expected_prev[27] !== last_branch_offset_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[27] = branch_offset_expected_prev[27];
	end
	if (
		( branch_offset_expected_prev[28] !== 1'bx ) && ( branch_offset_prev[28] !== branch_offset_expected_prev[28] )
		&& ((branch_offset_expected_prev[28] !== last_branch_offset_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[28] = branch_offset_expected_prev[28];
	end
	if (
		( branch_offset_expected_prev[29] !== 1'bx ) && ( branch_offset_prev[29] !== branch_offset_expected_prev[29] )
		&& ((branch_offset_expected_prev[29] !== last_branch_offset_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[29] = branch_offset_expected_prev[29];
	end
	if (
		( branch_offset_expected_prev[30] !== 1'bx ) && ( branch_offset_prev[30] !== branch_offset_expected_prev[30] )
		&& ((branch_offset_expected_prev[30] !== last_branch_offset_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[30] = branch_offset_expected_prev[30];
	end
	if (
		( branch_offset_expected_prev[31] !== 1'bx ) && ( branch_offset_prev[31] !== branch_offset_expected_prev[31] )
		&& ((branch_offset_expected_prev[31] !== last_branch_offset_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch_offset[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_offset_expected_prev);
		$display ("     Real value = %b", branch_offset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branch_offset_exp[31] = branch_offset_expected_prev[31];
	end
	if (
		( IMEM_out_expected_prev[0] !== 1'bx ) && ( IMEM_out_prev[0] !== IMEM_out_expected_prev[0] )
		&& ((IMEM_out_expected_prev[0] !== last_IMEM_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[0] = IMEM_out_expected_prev[0];
	end
	if (
		( IMEM_out_expected_prev[1] !== 1'bx ) && ( IMEM_out_prev[1] !== IMEM_out_expected_prev[1] )
		&& ((IMEM_out_expected_prev[1] !== last_IMEM_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[1] = IMEM_out_expected_prev[1];
	end
	if (
		( IMEM_out_expected_prev[2] !== 1'bx ) && ( IMEM_out_prev[2] !== IMEM_out_expected_prev[2] )
		&& ((IMEM_out_expected_prev[2] !== last_IMEM_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[2] = IMEM_out_expected_prev[2];
	end
	if (
		( IMEM_out_expected_prev[3] !== 1'bx ) && ( IMEM_out_prev[3] !== IMEM_out_expected_prev[3] )
		&& ((IMEM_out_expected_prev[3] !== last_IMEM_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[3] = IMEM_out_expected_prev[3];
	end
	if (
		( IMEM_out_expected_prev[4] !== 1'bx ) && ( IMEM_out_prev[4] !== IMEM_out_expected_prev[4] )
		&& ((IMEM_out_expected_prev[4] !== last_IMEM_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[4] = IMEM_out_expected_prev[4];
	end
	if (
		( IMEM_out_expected_prev[5] !== 1'bx ) && ( IMEM_out_prev[5] !== IMEM_out_expected_prev[5] )
		&& ((IMEM_out_expected_prev[5] !== last_IMEM_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[5] = IMEM_out_expected_prev[5];
	end
	if (
		( IMEM_out_expected_prev[6] !== 1'bx ) && ( IMEM_out_prev[6] !== IMEM_out_expected_prev[6] )
		&& ((IMEM_out_expected_prev[6] !== last_IMEM_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[6] = IMEM_out_expected_prev[6];
	end
	if (
		( IMEM_out_expected_prev[7] !== 1'bx ) && ( IMEM_out_prev[7] !== IMEM_out_expected_prev[7] )
		&& ((IMEM_out_expected_prev[7] !== last_IMEM_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[7] = IMEM_out_expected_prev[7];
	end
	if (
		( IMEM_out_expected_prev[8] !== 1'bx ) && ( IMEM_out_prev[8] !== IMEM_out_expected_prev[8] )
		&& ((IMEM_out_expected_prev[8] !== last_IMEM_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[8] = IMEM_out_expected_prev[8];
	end
	if (
		( IMEM_out_expected_prev[9] !== 1'bx ) && ( IMEM_out_prev[9] !== IMEM_out_expected_prev[9] )
		&& ((IMEM_out_expected_prev[9] !== last_IMEM_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[9] = IMEM_out_expected_prev[9];
	end
	if (
		( IMEM_out_expected_prev[10] !== 1'bx ) && ( IMEM_out_prev[10] !== IMEM_out_expected_prev[10] )
		&& ((IMEM_out_expected_prev[10] !== last_IMEM_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[10] = IMEM_out_expected_prev[10];
	end
	if (
		( IMEM_out_expected_prev[11] !== 1'bx ) && ( IMEM_out_prev[11] !== IMEM_out_expected_prev[11] )
		&& ((IMEM_out_expected_prev[11] !== last_IMEM_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[11] = IMEM_out_expected_prev[11];
	end
	if (
		( IMEM_out_expected_prev[12] !== 1'bx ) && ( IMEM_out_prev[12] !== IMEM_out_expected_prev[12] )
		&& ((IMEM_out_expected_prev[12] !== last_IMEM_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[12] = IMEM_out_expected_prev[12];
	end
	if (
		( IMEM_out_expected_prev[13] !== 1'bx ) && ( IMEM_out_prev[13] !== IMEM_out_expected_prev[13] )
		&& ((IMEM_out_expected_prev[13] !== last_IMEM_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[13] = IMEM_out_expected_prev[13];
	end
	if (
		( IMEM_out_expected_prev[14] !== 1'bx ) && ( IMEM_out_prev[14] !== IMEM_out_expected_prev[14] )
		&& ((IMEM_out_expected_prev[14] !== last_IMEM_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[14] = IMEM_out_expected_prev[14];
	end
	if (
		( IMEM_out_expected_prev[15] !== 1'bx ) && ( IMEM_out_prev[15] !== IMEM_out_expected_prev[15] )
		&& ((IMEM_out_expected_prev[15] !== last_IMEM_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[15] = IMEM_out_expected_prev[15];
	end
	if (
		( IMEM_out_expected_prev[16] !== 1'bx ) && ( IMEM_out_prev[16] !== IMEM_out_expected_prev[16] )
		&& ((IMEM_out_expected_prev[16] !== last_IMEM_out_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[16] = IMEM_out_expected_prev[16];
	end
	if (
		( IMEM_out_expected_prev[17] !== 1'bx ) && ( IMEM_out_prev[17] !== IMEM_out_expected_prev[17] )
		&& ((IMEM_out_expected_prev[17] !== last_IMEM_out_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[17] = IMEM_out_expected_prev[17];
	end
	if (
		( IMEM_out_expected_prev[18] !== 1'bx ) && ( IMEM_out_prev[18] !== IMEM_out_expected_prev[18] )
		&& ((IMEM_out_expected_prev[18] !== last_IMEM_out_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[18] = IMEM_out_expected_prev[18];
	end
	if (
		( IMEM_out_expected_prev[19] !== 1'bx ) && ( IMEM_out_prev[19] !== IMEM_out_expected_prev[19] )
		&& ((IMEM_out_expected_prev[19] !== last_IMEM_out_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[19] = IMEM_out_expected_prev[19];
	end
	if (
		( IMEM_out_expected_prev[20] !== 1'bx ) && ( IMEM_out_prev[20] !== IMEM_out_expected_prev[20] )
		&& ((IMEM_out_expected_prev[20] !== last_IMEM_out_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[20] = IMEM_out_expected_prev[20];
	end
	if (
		( IMEM_out_expected_prev[21] !== 1'bx ) && ( IMEM_out_prev[21] !== IMEM_out_expected_prev[21] )
		&& ((IMEM_out_expected_prev[21] !== last_IMEM_out_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[21] = IMEM_out_expected_prev[21];
	end
	if (
		( IMEM_out_expected_prev[22] !== 1'bx ) && ( IMEM_out_prev[22] !== IMEM_out_expected_prev[22] )
		&& ((IMEM_out_expected_prev[22] !== last_IMEM_out_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[22] = IMEM_out_expected_prev[22];
	end
	if (
		( IMEM_out_expected_prev[23] !== 1'bx ) && ( IMEM_out_prev[23] !== IMEM_out_expected_prev[23] )
		&& ((IMEM_out_expected_prev[23] !== last_IMEM_out_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[23] = IMEM_out_expected_prev[23];
	end
	if (
		( IMEM_out_expected_prev[24] !== 1'bx ) && ( IMEM_out_prev[24] !== IMEM_out_expected_prev[24] )
		&& ((IMEM_out_expected_prev[24] !== last_IMEM_out_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[24] = IMEM_out_expected_prev[24];
	end
	if (
		( IMEM_out_expected_prev[25] !== 1'bx ) && ( IMEM_out_prev[25] !== IMEM_out_expected_prev[25] )
		&& ((IMEM_out_expected_prev[25] !== last_IMEM_out_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[25] = IMEM_out_expected_prev[25];
	end
	if (
		( IMEM_out_expected_prev[26] !== 1'bx ) && ( IMEM_out_prev[26] !== IMEM_out_expected_prev[26] )
		&& ((IMEM_out_expected_prev[26] !== last_IMEM_out_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[26] = IMEM_out_expected_prev[26];
	end
	if (
		( IMEM_out_expected_prev[27] !== 1'bx ) && ( IMEM_out_prev[27] !== IMEM_out_expected_prev[27] )
		&& ((IMEM_out_expected_prev[27] !== last_IMEM_out_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[27] = IMEM_out_expected_prev[27];
	end
	if (
		( IMEM_out_expected_prev[28] !== 1'bx ) && ( IMEM_out_prev[28] !== IMEM_out_expected_prev[28] )
		&& ((IMEM_out_expected_prev[28] !== last_IMEM_out_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[28] = IMEM_out_expected_prev[28];
	end
	if (
		( IMEM_out_expected_prev[29] !== 1'bx ) && ( IMEM_out_prev[29] !== IMEM_out_expected_prev[29] )
		&& ((IMEM_out_expected_prev[29] !== last_IMEM_out_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[29] = IMEM_out_expected_prev[29];
	end
	if (
		( IMEM_out_expected_prev[30] !== 1'bx ) && ( IMEM_out_prev[30] !== IMEM_out_expected_prev[30] )
		&& ((IMEM_out_expected_prev[30] !== last_IMEM_out_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[30] = IMEM_out_expected_prev[30];
	end
	if (
		( IMEM_out_expected_prev[31] !== 1'bx ) && ( IMEM_out_prev[31] !== IMEM_out_expected_prev[31] )
		&& ((IMEM_out_expected_prev[31] !== last_IMEM_out_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_out_expected_prev);
		$display ("     Real value = %b", IMEM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IMEM_out_exp[31] = IMEM_out_expected_prev[31];
	end
	if (
		( output_sys_expected_prev[0] !== 1'bx ) && ( output_sys_prev[0] !== output_sys_expected_prev[0] )
		&& ((output_sys_expected_prev[0] !== last_output_sys_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_sys[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_sys_expected_prev);
		$display ("     Real value = %b", output_sys_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_sys_exp[0] = output_sys_expected_prev[0];
	end
	if (
		( output_sys_expected_prev[1] !== 1'bx ) && ( output_sys_prev[1] !== output_sys_expected_prev[1] )
		&& ((output_sys_expected_prev[1] !== last_output_sys_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_sys[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_sys_expected_prev);
		$display ("     Real value = %b", output_sys_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_sys_exp[1] = output_sys_expected_prev[1];
	end
	if (
		( output_sys_expected_prev[2] !== 1'bx ) && ( output_sys_prev[2] !== output_sys_expected_prev[2] )
		&& ((output_sys_expected_prev[2] !== last_output_sys_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_sys[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_sys_expected_prev);
		$display ("     Real value = %b", output_sys_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_sys_exp[2] = output_sys_expected_prev[2];
	end
	if (
		( output_sys_expected_prev[3] !== 1'bx ) && ( output_sys_prev[3] !== output_sys_expected_prev[3] )
		&& ((output_sys_expected_prev[3] !== last_output_sys_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_sys[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_sys_expected_prev);
		$display ("     Real value = %b", output_sys_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_sys_exp[3] = output_sys_expected_prev[3];
	end
	if (
		( output_sys_expected_prev[4] !== 1'bx ) && ( output_sys_prev[4] !== output_sys_expected_prev[4] )
		&& ((output_sys_expected_prev[4] !== last_output_sys_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_sys[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_sys_expected_prev);
		$display ("     Real value = %b", output_sys_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_sys_exp[4] = output_sys_expected_prev[4];
	end
	if (
		( output_sys_expected_prev[5] !== 1'bx ) && ( output_sys_prev[5] !== output_sys_expected_prev[5] )
		&& ((output_sys_expected_prev[5] !== last_output_sys_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_sys[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_sys_expected_prev);
		$display ("     Real value = %b", output_sys_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_sys_exp[5] = output_sys_expected_prev[5];
	end
	if (
		( output_sys_expected_prev[6] !== 1'bx ) && ( output_sys_prev[6] !== output_sys_expected_prev[6] )
		&& ((output_sys_expected_prev[6] !== last_output_sys_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_sys[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_sys_expected_prev);
		$display ("     Real value = %b", output_sys_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_sys_exp[6] = output_sys_expected_prev[6];
	end
	if (
		( output_sys_expected_prev[7] !== 1'bx ) && ( output_sys_prev[7] !== output_sys_expected_prev[7] )
		&& ((output_sys_expected_prev[7] !== last_output_sys_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_sys[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_sys_expected_prev);
		$display ("     Real value = %b", output_sys_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_output_sys_exp[7] = output_sys_expected_prev[7];
	end
	if (
		( rd2_expected_prev[0] !== 1'bx ) && ( rd2_prev[0] !== rd2_expected_prev[0] )
		&& ((rd2_expected_prev[0] !== last_rd2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd2_exp[0] = rd2_expected_prev[0];
	end
	if (
		( rd2_expected_prev[1] !== 1'bx ) && ( rd2_prev[1] !== rd2_expected_prev[1] )
		&& ((rd2_expected_prev[1] !== last_rd2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd2_exp[1] = rd2_expected_prev[1];
	end
	if (
		( rd2_expected_prev[2] !== 1'bx ) && ( rd2_prev[2] !== rd2_expected_prev[2] )
		&& ((rd2_expected_prev[2] !== last_rd2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd2_exp[2] = rd2_expected_prev[2];
	end
	if (
		( rd2_expected_prev[3] !== 1'bx ) && ( rd2_prev[3] !== rd2_expected_prev[3] )
		&& ((rd2_expected_prev[3] !== last_rd2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd2_exp[3] = rd2_expected_prev[3];
	end
	if (
		( rd2_expected_prev[4] !== 1'bx ) && ( rd2_prev[4] !== rd2_expected_prev[4] )
		&& ((rd2_expected_prev[4] !== last_rd2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd2_exp[4] = rd2_expected_prev[4];
	end
	if (
		( rd2_expected_prev[5] !== 1'bx ) && ( rd2_prev[5] !== rd2_expected_prev[5] )
		&& ((rd2_expected_prev[5] !== last_rd2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd2_exp[5] = rd2_expected_prev[5];
	end
	if (
		( rd2_expected_prev[6] !== 1'bx ) && ( rd2_prev[6] !== rd2_expected_prev[6] )
		&& ((rd2_expected_prev[6] !== last_rd2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd2_exp[6] = rd2_expected_prev[6];
	end
	if (
		( rd2_expected_prev[7] !== 1'bx ) && ( rd2_prev[7] !== rd2_expected_prev[7] )
		&& ((rd2_expected_prev[7] !== last_rd2_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd2_exp[7] = rd2_expected_prev[7];
	end
	if (
		( REG_write_outp_expected_prev !== 1'bx ) && ( REG_write_outp_prev !== REG_write_outp_expected_prev )
		&& ((REG_write_outp_expected_prev !== last_REG_write_outp_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_write_outp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_write_outp_expected_prev);
		$display ("     Real value = %b", REG_write_outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_write_outp_exp = REG_write_outp_expected_prev;
	end
	if (
		( write_data_expected_prev[0] !== 1'bx ) && ( write_data_prev[0] !== write_data_expected_prev[0] )
		&& ((write_data_expected_prev[0] !== last_write_data_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_data_exp[0] = write_data_expected_prev[0];
	end
	if (
		( write_data_expected_prev[1] !== 1'bx ) && ( write_data_prev[1] !== write_data_expected_prev[1] )
		&& ((write_data_expected_prev[1] !== last_write_data_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_data_exp[1] = write_data_expected_prev[1];
	end
	if (
		( write_data_expected_prev[2] !== 1'bx ) && ( write_data_prev[2] !== write_data_expected_prev[2] )
		&& ((write_data_expected_prev[2] !== last_write_data_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_data_exp[2] = write_data_expected_prev[2];
	end
	if (
		( write_data_expected_prev[3] !== 1'bx ) && ( write_data_prev[3] !== write_data_expected_prev[3] )
		&& ((write_data_expected_prev[3] !== last_write_data_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_data_exp[3] = write_data_expected_prev[3];
	end
	if (
		( write_data_expected_prev[4] !== 1'bx ) && ( write_data_prev[4] !== write_data_expected_prev[4] )
		&& ((write_data_expected_prev[4] !== last_write_data_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_data_exp[4] = write_data_expected_prev[4];
	end
	if (
		( write_data_expected_prev[5] !== 1'bx ) && ( write_data_prev[5] !== write_data_expected_prev[5] )
		&& ((write_data_expected_prev[5] !== last_write_data_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_data_exp[5] = write_data_expected_prev[5];
	end
	if (
		( write_data_expected_prev[6] !== 1'bx ) && ( write_data_prev[6] !== write_data_expected_prev[6] )
		&& ((write_data_expected_prev[6] !== last_write_data_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_data_exp[6] = write_data_expected_prev[6];
	end
	if (
		( write_data_expected_prev[7] !== 1'bx ) && ( write_data_prev[7] !== write_data_expected_prev[7] )
		&& ((write_data_expected_prev[7] !== last_write_data_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_write_data_exp[7] = write_data_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_level_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg global_reset;
reg [2:0] output_sel;
// wires                                               
wire [31:0] branch_offset;
wire [31:0] IMEM_out;
wire [7:0] output_sys;
wire [7:0] rd2;
wire REG_write_outp;
wire [7:0] write_data;

wire sampler;                             

// assign statements (if any)                          
top_level i1 (
// port map - connection between master ports and signals/registers   
	.branch_offset(branch_offset),
	.clk(clk),
	.global_reset(global_reset),
	.IMEM_out(IMEM_out),
	.output_sel(output_sel),
	.output_sys(output_sys),
	.rd2(rd2),
	.REG_write_outp(REG_write_outp),
	.write_data(write_data)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #300000 1'b1;
		# 300000;
	end
	clk = 1'b0;
end 

// global_reset
initial
begin
	global_reset = 1'b0;
	global_reset = #310000 1'b1;
end 
// output_sel[ 2 ]
initial
begin
	repeat(33)
	begin
		output_sel[2] = 1'b1;
		output_sel[2] = #300000 1'b0;
		# 300000;
	end
	output_sel[2] = 1'b1;
end 
// output_sel[ 1 ]
initial
begin
	repeat(66)
	begin
		output_sel[1] = 1'b0;
		output_sel[1] = #150000 1'b1;
		# 150000;
	end
	output_sel[1] = 1'b0;
	output_sel[1] = #150000 1'b1;
end 
// output_sel[ 0 ]
initial
begin
	repeat(133)
	begin
		output_sel[0] = 1'b0;
		output_sel[0] = #75000 1'b1;
		# 75000;
	end
	output_sel[0] = 1'b0;
end 

top_level_vlg_sample_tst tb_sample (
	.clk(clk),
	.global_reset(global_reset),
	.output_sel(output_sel),
	.sampler_tx(sampler)
);

top_level_vlg_check_tst tb_out(
	.branch_offset(branch_offset),
	.IMEM_out(IMEM_out),
	.output_sys(output_sys),
	.rd2(rd2),
	.REG_write_outp(REG_write_outp),
	.write_data(write_data),
	.sampler_rx(sampler)
);
endmodule

