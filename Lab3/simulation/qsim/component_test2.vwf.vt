// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2024 12:39:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    component_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module component_test_vlg_sample_tst(
	ALU_functxcfb,
	ALU_opdfsgd,
	ALU_shamtzf,
	ALU_srcghtd,
	PC_branch_offsesgdrt,
	REG_data1sg,
	REG_data2xfbx,
	sampler_tx
);
input [5:0] ALU_functxcfb;
input [5:0] ALU_opdfsgd;
input [4:0] ALU_shamtzf;
input  ALU_srcghtd;
input [31:0] PC_branch_offsesgdrt;
input [7:0] REG_data1sg;
input [7:0] REG_data2xfbx;
output sampler_tx;

reg sample;
time current_time;
always @(ALU_functxcfb or ALU_opdfsgd or ALU_shamtzf or ALU_srcghtd or PC_branch_offsesgdrt or REG_data1sg or REG_data2xfbx)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module component_test_vlg_check_tst (
	ALU_c_out,
	ALU_equal,
	ALU_less_than,
	ALU_overflow,
	ALU_result,
	ALU_zero,
	sampler_rx
);
input  ALU_c_out;
input  ALU_equal;
input  ALU_less_than;
input  ALU_overflow;
input [7:0] ALU_result;
input  ALU_zero;
input sampler_rx;

reg  ALU_c_out_expected;
reg  ALU_equal_expected;
reg  ALU_less_than_expected;
reg  ALU_overflow_expected;
reg [7:0] ALU_result_expected;
reg  ALU_zero_expected;

reg  ALU_c_out_prev;
reg  ALU_equal_prev;
reg  ALU_less_than_prev;
reg  ALU_overflow_prev;
reg [7:0] ALU_result_prev;
reg  ALU_zero_prev;

reg  ALU_c_out_expected_prev;
reg  ALU_equal_expected_prev;
reg  ALU_less_than_expected_prev;
reg  ALU_overflow_expected_prev;
reg [7:0] ALU_result_expected_prev;
reg  ALU_zero_expected_prev;

reg  last_ALU_c_out_exp;
reg  last_ALU_equal_exp;
reg  last_ALU_less_than_exp;
reg  last_ALU_overflow_exp;
reg [7:0] last_ALU_result_exp;
reg  last_ALU_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_c_out_prev = ALU_c_out;
	ALU_equal_prev = ALU_equal;
	ALU_less_than_prev = ALU_less_than;
	ALU_overflow_prev = ALU_overflow;
	ALU_result_prev = ALU_result;
	ALU_zero_prev = ALU_zero;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_c_out_expected_prev = ALU_c_out_expected;
	ALU_equal_expected_prev = ALU_equal_expected;
	ALU_less_than_expected_prev = ALU_less_than_expected;
	ALU_overflow_expected_prev = ALU_overflow_expected;
	ALU_result_expected_prev = ALU_result_expected;
	ALU_zero_expected_prev = ALU_zero_expected;
end


// expected ALU_result[ 7 ]
initial
begin
	ALU_result_expected[7] = 1'bX;
end 
// expected ALU_result[ 6 ]
initial
begin
	ALU_result_expected[6] = 1'bX;
end 
// expected ALU_result[ 5 ]
initial
begin
	ALU_result_expected[5] = 1'bX;
end 
// expected ALU_result[ 4 ]
initial
begin
	ALU_result_expected[4] = 1'bX;
end 
// expected ALU_result[ 3 ]
initial
begin
	ALU_result_expected[3] = 1'bX;
end 
// expected ALU_result[ 2 ]
initial
begin
	ALU_result_expected[2] = 1'bX;
end 
// expected ALU_result[ 1 ]
initial
begin
	ALU_result_expected[1] = 1'bX;
end 
// expected ALU_result[ 0 ]
initial
begin
	ALU_result_expected[0] = 1'bX;
end 

// expected ALU_zero
initial
begin
	ALU_zero_expected = 1'bX;
end 

// expected ALU_c_out
initial
begin
	ALU_c_out_expected = 1'bX;
end 

// expected ALU_overflow
initial
begin
	ALU_overflow_expected = 1'bX;
end 

// expected ALU_less_than
initial
begin
	ALU_less_than_expected = 1'bX;
end 

// expected ALU_equal
initial
begin
	ALU_equal_expected = 1'bX;
end 
// generate trigger
always @(ALU_c_out_expected or ALU_c_out or ALU_equal_expected or ALU_equal or ALU_less_than_expected or ALU_less_than or ALU_overflow_expected or ALU_overflow or ALU_result_expected or ALU_result or ALU_zero_expected or ALU_zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_c_out = %b | expected ALU_equal = %b | expected ALU_less_than = %b | expected ALU_overflow = %b | expected ALU_result = %b | expected ALU_zero = %b | ",ALU_c_out_expected_prev,ALU_equal_expected_prev,ALU_less_than_expected_prev,ALU_overflow_expected_prev,ALU_result_expected_prev,ALU_zero_expected_prev);
	$display("| real ALU_c_out = %b | real ALU_equal = %b | real ALU_less_than = %b | real ALU_overflow = %b | real ALU_result = %b | real ALU_zero = %b | ",ALU_c_out_prev,ALU_equal_prev,ALU_less_than_prev,ALU_overflow_prev,ALU_result_prev,ALU_zero_prev);
`endif
	if (
		( ALU_c_out_expected_prev !== 1'bx ) && ( ALU_c_out_prev !== ALU_c_out_expected_prev )
		&& ((ALU_c_out_expected_prev !== last_ALU_c_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_c_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_c_out_expected_prev);
		$display ("     Real value = %b", ALU_c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_c_out_exp = ALU_c_out_expected_prev;
	end
	if (
		( ALU_equal_expected_prev !== 1'bx ) && ( ALU_equal_prev !== ALU_equal_expected_prev )
		&& ((ALU_equal_expected_prev !== last_ALU_equal_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_equal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_equal_expected_prev);
		$display ("     Real value = %b", ALU_equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_equal_exp = ALU_equal_expected_prev;
	end
	if (
		( ALU_less_than_expected_prev !== 1'bx ) && ( ALU_less_than_prev !== ALU_less_than_expected_prev )
		&& ((ALU_less_than_expected_prev !== last_ALU_less_than_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_less_than :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_less_than_expected_prev);
		$display ("     Real value = %b", ALU_less_than_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_less_than_exp = ALU_less_than_expected_prev;
	end
	if (
		( ALU_overflow_expected_prev !== 1'bx ) && ( ALU_overflow_prev !== ALU_overflow_expected_prev )
		&& ((ALU_overflow_expected_prev !== last_ALU_overflow_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_overflow_expected_prev);
		$display ("     Real value = %b", ALU_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALU_overflow_exp = ALU_overflow_expected_prev;
	end
	if (
		( ALU_result_expected_prev[0] !== 1'bx ) && ( ALU_result_prev[0] !== ALU_result_expected_prev[0] )
		&& ((ALU_result_expected_prev[0] !== last_ALU_result_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALU_result_exp[0] = ALU_result_expected_prev[0];
	end
	if (
		( ALU_result_expected_prev[1] !== 1'bx ) && ( ALU_result_prev[1] !== ALU_result_expected_prev[1] )
		&& ((ALU_result_expected_prev[1] !== last_ALU_result_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALU_result_exp[1] = ALU_result_expected_prev[1];
	end
	if (
		( ALU_result_expected_prev[2] !== 1'bx ) && ( ALU_result_prev[2] !== ALU_result_expected_prev[2] )
		&& ((ALU_result_expected_prev[2] !== last_ALU_result_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALU_result_exp[2] = ALU_result_expected_prev[2];
	end
	if (
		( ALU_result_expected_prev[3] !== 1'bx ) && ( ALU_result_prev[3] !== ALU_result_expected_prev[3] )
		&& ((ALU_result_expected_prev[3] !== last_ALU_result_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALU_result_exp[3] = ALU_result_expected_prev[3];
	end
	if (
		( ALU_result_expected_prev[4] !== 1'bx ) && ( ALU_result_prev[4] !== ALU_result_expected_prev[4] )
		&& ((ALU_result_expected_prev[4] !== last_ALU_result_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALU_result_exp[4] = ALU_result_expected_prev[4];
	end
	if (
		( ALU_result_expected_prev[5] !== 1'bx ) && ( ALU_result_prev[5] !== ALU_result_expected_prev[5] )
		&& ((ALU_result_expected_prev[5] !== last_ALU_result_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALU_result_exp[5] = ALU_result_expected_prev[5];
	end
	if (
		( ALU_result_expected_prev[6] !== 1'bx ) && ( ALU_result_prev[6] !== ALU_result_expected_prev[6] )
		&& ((ALU_result_expected_prev[6] !== last_ALU_result_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALU_result_exp[6] = ALU_result_expected_prev[6];
	end
	if (
		( ALU_result_expected_prev[7] !== 1'bx ) && ( ALU_result_prev[7] !== ALU_result_expected_prev[7] )
		&& ((ALU_result_expected_prev[7] !== last_ALU_result_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ALU_result_exp[7] = ALU_result_expected_prev[7];
	end
	if (
		( ALU_zero_expected_prev !== 1'bx ) && ( ALU_zero_prev !== ALU_zero_expected_prev )
		&& ((ALU_zero_expected_prev !== last_ALU_zero_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_zero_expected_prev);
		$display ("     Real value = %b", ALU_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALU_zero_exp = ALU_zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module component_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] ALU_functxcfb;
reg [5:0] ALU_opdfsgd;
reg [4:0] ALU_shamtzf;
reg ALU_srcghtd;
reg [31:0] PC_branch_offsesgdrt;
reg [7:0] REG_data1sg;
reg [7:0] REG_data2xfbx;
// wires                                               
wire ALU_c_out;
wire ALU_equal;
wire ALU_less_than;
wire ALU_overflow;
wire [7:0] ALU_result;
wire ALU_zero;

wire sampler;                             

// assign statements (if any)                          
component_test i1 (
// port map - connection between master ports and signals/registers   
	.ALU_c_out(ALU_c_out),
	.ALU_equal(ALU_equal),
	.ALU_functxcfb(ALU_functxcfb),
	.ALU_less_than(ALU_less_than),
	.ALU_opdfsgd(ALU_opdfsgd),
	.ALU_overflow(ALU_overflow),
	.ALU_result(ALU_result),
	.ALU_shamtzf(ALU_shamtzf),
	.ALU_srcghtd(ALU_srcghtd),
	.ALU_zero(ALU_zero),
	.PC_branch_offsesgdrt(PC_branch_offsesgdrt),
	.REG_data1sg(REG_data1sg),
	.REG_data2xfbx(REG_data2xfbx)
);
// PC_branch_offsesgdrt[ 31 ]
initial
begin
	PC_branch_offsesgdrt[31] = 1'b0;
end 
// PC_branch_offsesgdrt[ 30 ]
initial
begin
	PC_branch_offsesgdrt[30] = 1'b0;
end 
// PC_branch_offsesgdrt[ 29 ]
initial
begin
	PC_branch_offsesgdrt[29] = 1'b0;
end 
// PC_branch_offsesgdrt[ 28 ]
initial
begin
	PC_branch_offsesgdrt[28] = 1'b0;
end 
// PC_branch_offsesgdrt[ 27 ]
initial
begin
	PC_branch_offsesgdrt[27] = 1'b0;
end 
// PC_branch_offsesgdrt[ 26 ]
initial
begin
	PC_branch_offsesgdrt[26] = 1'b0;
end 
// PC_branch_offsesgdrt[ 25 ]
initial
begin
	PC_branch_offsesgdrt[25] = 1'b0;
end 
// PC_branch_offsesgdrt[ 24 ]
initial
begin
	PC_branch_offsesgdrt[24] = 1'b0;
end 
// PC_branch_offsesgdrt[ 23 ]
initial
begin
	PC_branch_offsesgdrt[23] = 1'b0;
end 
// PC_branch_offsesgdrt[ 22 ]
initial
begin
	PC_branch_offsesgdrt[22] = 1'b0;
end 
// PC_branch_offsesgdrt[ 21 ]
initial
begin
	PC_branch_offsesgdrt[21] = 1'b0;
end 
// PC_branch_offsesgdrt[ 20 ]
initial
begin
	PC_branch_offsesgdrt[20] = 1'b0;
end 
// PC_branch_offsesgdrt[ 19 ]
initial
begin
	PC_branch_offsesgdrt[19] = 1'b0;
end 
// PC_branch_offsesgdrt[ 18 ]
initial
begin
	PC_branch_offsesgdrt[18] = 1'b0;
end 
// PC_branch_offsesgdrt[ 17 ]
initial
begin
	PC_branch_offsesgdrt[17] = 1'b0;
end 
// PC_branch_offsesgdrt[ 16 ]
initial
begin
	PC_branch_offsesgdrt[16] = 1'b0;
end 
// PC_branch_offsesgdrt[ 15 ]
initial
begin
	PC_branch_offsesgdrt[15] = 1'b0;
end 
// PC_branch_offsesgdrt[ 14 ]
initial
begin
	PC_branch_offsesgdrt[14] = 1'b0;
end 
// PC_branch_offsesgdrt[ 13 ]
initial
begin
	PC_branch_offsesgdrt[13] = 1'b0;
end 
// PC_branch_offsesgdrt[ 12 ]
initial
begin
	PC_branch_offsesgdrt[12] = 1'b0;
end 
// PC_branch_offsesgdrt[ 11 ]
initial
begin
	PC_branch_offsesgdrt[11] = 1'b0;
end 
// PC_branch_offsesgdrt[ 10 ]
initial
begin
	PC_branch_offsesgdrt[10] = 1'b0;
end 
// PC_branch_offsesgdrt[ 9 ]
initial
begin
	PC_branch_offsesgdrt[9] = 1'b0;
end 
// PC_branch_offsesgdrt[ 8 ]
initial
begin
	PC_branch_offsesgdrt[8] = 1'b0;
end 
// PC_branch_offsesgdrt[ 7 ]
initial
begin
	PC_branch_offsesgdrt[7] = 1'b0;
end 
// PC_branch_offsesgdrt[ 6 ]
initial
begin
	PC_branch_offsesgdrt[6] = 1'b0;
end 
// PC_branch_offsesgdrt[ 5 ]
initial
begin
	PC_branch_offsesgdrt[5] = 1'b0;
end 
// PC_branch_offsesgdrt[ 4 ]
initial
begin
	PC_branch_offsesgdrt[4] = 1'b1;
end 
// PC_branch_offsesgdrt[ 3 ]
initial
begin
	PC_branch_offsesgdrt[3] = 1'b1;
end 
// PC_branch_offsesgdrt[ 2 ]
initial
begin
	PC_branch_offsesgdrt[2] = 1'b0;
end 
// PC_branch_offsesgdrt[ 1 ]
initial
begin
	PC_branch_offsesgdrt[1] = 1'b0;
end 
// PC_branch_offsesgdrt[ 0 ]
initial
begin
	PC_branch_offsesgdrt[0] = 1'b0;
end 
// REG_data1sg[ 7 ]
initial
begin
	REG_data1sg[7] = 1'b1;
	REG_data1sg[7] = #590000 1'b0;
	REG_data1sg[7] = #400000 1'b1;
end 
// REG_data1sg[ 6 ]
initial
begin
	REG_data1sg[6] = 1'b0;
	REG_data1sg[6] = #560000 1'b1;
	REG_data1sg[6] = #30000 1'b0;
end 
// REG_data1sg[ 5 ]
initial
begin
	REG_data1sg[5] = 1'b1;
	REG_data1sg[5] = #590000 1'b0;
	REG_data1sg[5] = #320000 1'b1;
end 
// REG_data1sg[ 4 ]
initial
begin
	REG_data1sg[4] = 1'b0;
	REG_data1sg[4] = #560000 1'b1;
	REG_data1sg[4] = #30000 1'b0;
	REG_data1sg[4] = #160000 1'b1;
	REG_data1sg[4] = #160000 1'b0;
end 
// REG_data1sg[ 3 ]
initial
begin
	REG_data1sg[3] = 1'b0;
	REG_data1sg[3] = #560000 1'b1;
	# 30000;
	repeat(2)
	begin
		REG_data1sg[3] = 1'b0;
		REG_data1sg[3] = #80000 1'b1;
		# 80000;
	end
	REG_data1sg[3] = 1'b0;
end 
// REG_data1sg[ 2 ]
initial
begin
	REG_data1sg[2] = 1'b1;
	REG_data1sg[2] = #590000 1'b0;
	REG_data1sg[2] = #40000 1'b1;
	# 40000;
	repeat(3)
	begin
		REG_data1sg[2] = 1'b0;
		REG_data1sg[2] = #40000 1'b1;
		# 40000;
	end
	REG_data1sg[2] = 1'b0;
	REG_data1sg[2] = #40000 1'b1;
end 
// REG_data1sg[ 1 ]
initial
begin
	REG_data1sg[1] = 1'b0;
	REG_data1sg[1] = #570000 1'b1;
	REG_data1sg[1] = #20000 1'b0;
	# 20000;
	repeat(9)
	begin
		REG_data1sg[1] = 1'b1;
		REG_data1sg[1] = #20000 1'b0;
		# 20000;
	end
	REG_data1sg[1] = 1'b1;
	REG_data1sg[1] = #20000 1'b0;
end 
// REG_data1sg[ 0 ]
initial
begin
	REG_data1sg[0] = 1'b0;
	# 560000;
	repeat(21)
	begin
		REG_data1sg[0] = 1'b1;
		REG_data1sg[0] = #10000 1'b0;
		# 10000;
	end
	REG_data1sg[0] = 1'b1;
	REG_data1sg[0] = #10000 1'b0;
end 
// REG_data2xfbx[ 7 ]
initial
begin
	REG_data2xfbx[7] = 1'b0;
end 
// REG_data2xfbx[ 6 ]
initial
begin
	REG_data2xfbx[6] = 1'b1;
	REG_data2xfbx[6] = #560000 1'b0;
end 
// REG_data2xfbx[ 5 ]
initial
begin
	REG_data2xfbx[5] = 1'b1;
	REG_data2xfbx[5] = #560000 1'b0;
end 
// REG_data2xfbx[ 4 ]
initial
begin
	REG_data2xfbx[4] = 1'b0;
end 
// REG_data2xfbx[ 3 ]
initial
begin
	REG_data2xfbx[3] = 1'b0;
end 
// REG_data2xfbx[ 2 ]
initial
begin
	REG_data2xfbx[2] = 1'b1;
	REG_data2xfbx[2] = #560000 1'b0;
end 
// REG_data2xfbx[ 1 ]
initial
begin
	REG_data2xfbx[1] = 1'b0;
end 
// REG_data2xfbx[ 0 ]
initial
begin
	REG_data2xfbx[0] = 1'b1;
end 

// ALU_srcghtd
initial
begin
	ALU_srcghtd = 1'b0;
	ALU_srcghtd = #200000 1'b1;
	ALU_srcghtd = #200000 1'b0;
	ALU_srcghtd = #80000 1'b1;
	ALU_srcghtd = #80000 1'b0;
end 
// ALU_opdfsgd[ 5 ]
initial
begin
	ALU_opdfsgd[5] = 1'b0;
end 
// ALU_opdfsgd[ 4 ]
initial
begin
	ALU_opdfsgd[4] = 1'b0;
end 
// ALU_opdfsgd[ 3 ]
initial
begin
	ALU_opdfsgd[3] = 1'b0;
end 
// ALU_opdfsgd[ 2 ]
initial
begin
	ALU_opdfsgd[2] = 1'b0;
end 
// ALU_opdfsgd[ 1 ]
initial
begin
	ALU_opdfsgd[1] = 1'b1;
	ALU_opdfsgd[1] = #400000 1'b0;
	ALU_opdfsgd[1] = #160000 1'b1;
end 
// ALU_opdfsgd[ 0 ]
initial
begin
	ALU_opdfsgd[0] = 1'b0;
	ALU_opdfsgd[0] = #440000 1'b1;
	ALU_opdfsgd[0] = #40000 1'b0;
	ALU_opdfsgd[0] = #40000 1'b1;
	ALU_opdfsgd[0] = #40000 1'b0;
end 
// ALU_shamtzf[ 4 ]
initial
begin
	ALU_shamtzf[4] = 1'bX;
end 
// ALU_shamtzf[ 3 ]
initial
begin
	ALU_shamtzf[3] = 1'bX;
end 
// ALU_shamtzf[ 2 ]
initial
begin
	ALU_shamtzf[2] = 1'bX;
end 
// ALU_shamtzf[ 1 ]
initial
begin
	ALU_shamtzf[1] = 1'bX;
end 
// ALU_shamtzf[ 0 ]
initial
begin
	ALU_shamtzf[0] = 1'bX;
end 
// ALU_functxcfb[ 5 ]
initial
begin
	ALU_functxcfb[5] = 1'b0;
	ALU_functxcfb[5] = #990000 1'bX;
end 
// ALU_functxcfb[ 4 ]
initial
begin
	ALU_functxcfb[4] = 1'b0;
	ALU_functxcfb[4] = #990000 1'bX;
end 
// ALU_functxcfb[ 3 ]
initial
begin
	ALU_functxcfb[3] = 1'b0;
	ALU_functxcfb[3] = #160000 1'b1;
	ALU_functxcfb[3] = #40000 1'b0;
	ALU_functxcfb[3] = #160000 1'b1;
	ALU_functxcfb[3] = #40000 1'b0;
	ALU_functxcfb[3] = #590000 1'bX;
end 
// ALU_functxcfb[ 2 ]
initial
begin
	ALU_functxcfb[2] = 1'b0;
	ALU_functxcfb[2] = #80000 1'b1;
	ALU_functxcfb[2] = #80000 1'b0;
	ALU_functxcfb[2] = #120000 1'b1;
	ALU_functxcfb[2] = #80000 1'b0;
	ALU_functxcfb[2] = #630000 1'bX;
end 
// ALU_functxcfb[ 1 ]
initial
begin
	ALU_functxcfb[1] = 1'b0;
	ALU_functxcfb[1] = #40000 1'b1;
	ALU_functxcfb[1] = #40000 1'b0;
	ALU_functxcfb[1] = #80000 1'b1;
	ALU_functxcfb[1] = #40000 1'b0;
	ALU_functxcfb[1] = #40000 1'b1;
	ALU_functxcfb[1] = #40000 1'b0;
	ALU_functxcfb[1] = #80000 1'b1;
	ALU_functxcfb[1] = #40000 1'b0;
	ALU_functxcfb[1] = #590000 1'bX;
end 
// ALU_functxcfb[ 0 ]
initial
begin
	ALU_functxcfb[0] = 1'b0;
	ALU_functxcfb[0] = #120000 1'b1;
	ALU_functxcfb[0] = #40000 1'b0;
	ALU_functxcfb[0] = #160000 1'b1;
	ALU_functxcfb[0] = #40000 1'b0;
	ALU_functxcfb[0] = #630000 1'bX;
end 

component_test_vlg_sample_tst tb_sample (
	.ALU_functxcfb(ALU_functxcfb),
	.ALU_opdfsgd(ALU_opdfsgd),
	.ALU_shamtzf(ALU_shamtzf),
	.ALU_srcghtd(ALU_srcghtd),
	.PC_branch_offsesgdrt(PC_branch_offsesgdrt),
	.REG_data1sg(REG_data1sg),
	.REG_data2xfbx(REG_data2xfbx),
	.sampler_tx(sampler)
);

component_test_vlg_check_tst tb_out(
	.ALU_c_out(ALU_c_out),
	.ALU_equal(ALU_equal),
	.ALU_less_than(ALU_less_than),
	.ALU_overflow(ALU_overflow),
	.ALU_result(ALU_result),
	.ALU_zero(ALU_zero),
	.sampler_rx(sampler)
);
endmodule

