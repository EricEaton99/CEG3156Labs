// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2024 11:47:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    component_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module component_test_vlg_sample_tst(
	ALU_funct,
	ALU_op,
	ALU_shamt,
	ALU_src,
	PC_branch_offset,
	REG_data1,
	REG_data2,
	sampler_tx
);
input [5:0] ALU_funct;
input [5:0] ALU_op;
input [4:0] ALU_shamt;
input  ALU_src;
input [31:0] PC_branch_offset;
input [7:0] REG_data1;
input [7:0] REG_data2;
output sampler_tx;

reg sample;
time current_time;
always @(ALU_funct or ALU_op or ALU_shamt or ALU_src or PC_branch_offset or REG_data1 or REG_data2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module component_test_vlg_check_tst (
	ALU_c_out,
	ALU_overflow,
	ALU_result,
	ALU_zero,
	sampler_rx
);
input  ALU_c_out;
input  ALU_overflow;
input [7:0] ALU_result;
input  ALU_zero;
input sampler_rx;

reg  ALU_c_out_expected;
reg  ALU_overflow_expected;
reg [7:0] ALU_result_expected;
reg  ALU_zero_expected;

reg  ALU_c_out_prev;
reg  ALU_overflow_prev;
reg [7:0] ALU_result_prev;
reg  ALU_zero_prev;

reg  ALU_c_out_expected_prev;
reg  ALU_overflow_expected_prev;
reg [7:0] ALU_result_expected_prev;
reg  ALU_zero_expected_prev;

reg  last_ALU_c_out_exp;
reg  last_ALU_overflow_exp;
reg [7:0] last_ALU_result_exp;
reg  last_ALU_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_c_out_prev = ALU_c_out;
	ALU_overflow_prev = ALU_overflow;
	ALU_result_prev = ALU_result;
	ALU_zero_prev = ALU_zero;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_c_out_expected_prev = ALU_c_out_expected;
	ALU_overflow_expected_prev = ALU_overflow_expected;
	ALU_result_expected_prev = ALU_result_expected;
	ALU_zero_expected_prev = ALU_zero_expected;
end



// expected ALU_c_out
initial
begin
	ALU_c_out_expected = 1'bX;
end 

// expected ALU_funct[5]
initial
begin
	ALU_funct_expected[5] = 1'b0;
end 

// expected ALU_funct[4]
initial
begin
	ALU_funct_expected[4] = 1'b0;
end 

// expected ALU_funct[3]
initial
begin
	ALU_funct_expected[3] = 1'b0;
	ALU_funct_expected[3] = #320000 1'b1;
	ALU_funct_expected[3] = #80000 1'b0;
end 

// expected ALU_funct[2]
initial
begin
	ALU_funct_expected[2] = 1'b0;
	ALU_funct_expected[2] = #160000 1'b1;
	ALU_funct_expected[2] = #160000 1'b0;
end 

// expected ALU_funct[1]
initial
begin
	ALU_funct_expected[1] = 1'b0;
	ALU_funct_expected[1] = #80000 1'b1;
	ALU_funct_expected[1] = #80000 1'b0;
	ALU_funct_expected[1] = #160000 1'b1;
	ALU_funct_expected[1] = #80000 1'b0;
end 

// expected ALU_funct[0]
initial
begin
	ALU_funct_expected[0] = 1'b0;
	ALU_funct_expected[0] = #240000 1'b1;
	ALU_funct_expected[0] = #80000 1'b0;
end 

// expected ALU_op[5]
initial
begin
	ALU_op_expected[5] = 1'b0;
end 

// expected ALU_op[4]
initial
begin
	ALU_op_expected[4] = 1'b0;
end 

// expected ALU_op[3]
initial
begin
	ALU_op_expected[3] = 1'b0;
end 

// expected ALU_op[2]
initial
begin
	ALU_op_expected[2] = 1'b0;
end 

// expected ALU_op[1]
initial
begin
	ALU_op_expected[1] = 1'b1;
	ALU_op_expected[1] = #400000 1'b0;
end 

// expected ALU_op[0]
initial
begin
	ALU_op_expected[0] = 1'b0;
	ALU_op_expected[0] = #560000 1'b1;
	ALU_op_expected[0] = #160000 1'b0;
end 

// expected ALU_overflow
initial
begin
	ALU_overflow_expected = 1'bX;
end 
// expected ALU_result[ 7 ]
initial
begin
	ALU_result_expected[7] = 1'bX;
end 
// expected ALU_result[ 6 ]
initial
begin
	ALU_result_expected[6] = 1'bX;
end 
// expected ALU_result[ 5 ]
initial
begin
	ALU_result_expected[5] = 1'bX;
end 
// expected ALU_result[ 4 ]
initial
begin
	ALU_result_expected[4] = 1'bX;
end 
// expected ALU_result[ 3 ]
initial
begin
	ALU_result_expected[3] = 1'bX;
end 
// expected ALU_result[ 2 ]
initial
begin
	ALU_result_expected[2] = 1'bX;
end 
// expected ALU_result[ 1 ]
initial
begin
	ALU_result_expected[1] = 1'bX;
end 
// expected ALU_result[ 0 ]
initial
begin
	ALU_result_expected[0] = 1'bX;
end 

// expected ALU_zero
initial
begin
	ALU_zero_expected = 1'bX;
end 

// expected PC_branch_offset[31]
initial
begin
	PC_branch_offset_expected[31] = 1'b0;
end 

// expected PC_branch_offset[30]
initial
begin
	PC_branch_offset_expected[30] = 1'b0;
end 

// expected PC_branch_offset[29]
initial
begin
	PC_branch_offset_expected[29] = 1'b0;
end 

// expected PC_branch_offset[28]
initial
begin
	PC_branch_offset_expected[28] = 1'b0;
end 

// expected PC_branch_offset[27]
initial
begin
	PC_branch_offset_expected[27] = 1'b0;
end 

// expected PC_branch_offset[26]
initial
begin
	PC_branch_offset_expected[26] = 1'b0;
end 

// expected PC_branch_offset[25]
initial
begin
	PC_branch_offset_expected[25] = 1'b0;
end 

// expected PC_branch_offset[24]
initial
begin
	PC_branch_offset_expected[24] = 1'b0;
end 

// expected PC_branch_offset[23]
initial
begin
	PC_branch_offset_expected[23] = 1'b0;
end 

// expected PC_branch_offset[22]
initial
begin
	PC_branch_offset_expected[22] = 1'b0;
end 

// expected PC_branch_offset[21]
initial
begin
	PC_branch_offset_expected[21] = 1'b0;
end 

// expected PC_branch_offset[20]
initial
begin
	PC_branch_offset_expected[20] = 1'b0;
end 

// expected PC_branch_offset[19]
initial
begin
	PC_branch_offset_expected[19] = 1'b0;
end 

// expected PC_branch_offset[18]
initial
begin
	PC_branch_offset_expected[18] = 1'b0;
end 

// expected PC_branch_offset[17]
initial
begin
	PC_branch_offset_expected[17] = 1'b0;
end 

// expected PC_branch_offset[16]
initial
begin
	PC_branch_offset_expected[16] = 1'b0;
end 

// expected PC_branch_offset[15]
initial
begin
	PC_branch_offset_expected[15] = 1'b0;
end 

// expected PC_branch_offset[14]
initial
begin
	PC_branch_offset_expected[14] = 1'b0;
end 

// expected PC_branch_offset[13]
initial
begin
	PC_branch_offset_expected[13] = 1'b0;
end 

// expected PC_branch_offset[12]
initial
begin
	PC_branch_offset_expected[12] = 1'b0;
end 

// expected PC_branch_offset[11]
initial
begin
	PC_branch_offset_expected[11] = 1'b0;
end 

// expected PC_branch_offset[10]
initial
begin
	PC_branch_offset_expected[10] = 1'b0;
end 

// expected PC_branch_offset[9]
initial
begin
	PC_branch_offset_expected[9] = 1'b0;
end 

// expected PC_branch_offset[8]
initial
begin
	PC_branch_offset_expected[8] = 1'b0;
end 

// expected PC_branch_offset[7]
initial
begin
	PC_branch_offset_expected[7] = 1'b1;
end 

// expected PC_branch_offset[6]
initial
begin
	PC_branch_offset_expected[6] = 1'b1;
end 

// expected PC_branch_offset[5]
initial
begin
	PC_branch_offset_expected[5] = 1'b0;
end 

// expected PC_branch_offset[4]
initial
begin
	PC_branch_offset_expected[4] = 1'b0;
end 

// expected PC_branch_offset[3]
initial
begin
	PC_branch_offset_expected[3] = 1'b0;
end 

// expected PC_branch_offset[2]
initial
begin
	PC_branch_offset_expected[2] = 1'b1;
end 

// expected PC_branch_offset[1]
initial
begin
	PC_branch_offset_expected[1] = 1'b0;
end 

// expected PC_branch_offset[0]
initial
begin
	PC_branch_offset_expected[0] = 1'b0;
end 

// expected REG_data1[7]
initial
begin
	REG_data1_expected[7] = 1'b0;
end 

// expected REG_data1[6]
initial
begin
	REG_data1_expected[6] = 1'b0;
end 

// expected REG_data1[5]
initial
begin
	REG_data1_expected[5] = 1'b1;
end 

// expected REG_data1[4]
initial
begin
	REG_data1_expected[4] = 1'b1;
end 

// expected REG_data1[3]
initial
begin
	REG_data1_expected[3] = 1'b1;
end 

// expected REG_data1[2]
initial
begin
	REG_data1_expected[2] = 1'b0;
end 

// expected REG_data1[1]
initial
begin
	REG_data1_expected[1] = 1'b1;
end 

// expected REG_data1[0]
initial
begin
	REG_data1_expected[0] = 1'b0;
end 

// expected REG_data2[7]
initial
begin
	REG_data2_expected[7] = 1'b1;
end 

// expected REG_data2[6]
initial
begin
	REG_data2_expected[6] = 1'b1;
end 

// expected REG_data2[5]
initial
begin
	REG_data2_expected[5] = 1'b1;
end 

// expected REG_data2[4]
initial
begin
	REG_data2_expected[4] = 1'b1;
end 

// expected REG_data2[3]
initial
begin
	REG_data2_expected[3] = 1'b0;
end 

// expected REG_data2[2]
initial
begin
	REG_data2_expected[2] = 1'b0;
end 

// expected REG_data2[1]
initial
begin
	REG_data2_expected[1] = 1'b0;
end 

// expected REG_data2[0]
initial
begin
	REG_data2_expected[0] = 1'b1;
end 
// generate trigger
always @(ALU_c_out_expected or ALU_c_out or ALU_overflow_expected or ALU_overflow or ALU_result_expected or ALU_result or ALU_zero_expected or ALU_zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_c_out = %b | expected ALU_overflow = %b | expected ALU_result = %b | expected ALU_zero = %b | ",ALU_c_out_expected_prev,ALU_overflow_expected_prev,ALU_result_expected_prev,ALU_zero_expected_prev);
	$display("| real ALU_c_out = %b | real ALU_overflow = %b | real ALU_result = %b | real ALU_zero = %b | ",ALU_c_out_prev,ALU_overflow_prev,ALU_result_prev,ALU_zero_prev);
`endif
	if (
		( ALU_c_out_expected_prev !== 1'bx ) && ( ALU_c_out_prev !== ALU_c_out_expected_prev )
		&& ((ALU_c_out_expected_prev !== last_ALU_c_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_c_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_c_out_expected_prev);
		$display ("     Real value = %b", ALU_c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_c_out_exp = ALU_c_out_expected_prev;
	end
	if (
		( ALU_overflow_expected_prev !== 1'bx ) && ( ALU_overflow_prev !== ALU_overflow_expected_prev )
		&& ((ALU_overflow_expected_prev !== last_ALU_overflow_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_overflow_expected_prev);
		$display ("     Real value = %b", ALU_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_overflow_exp = ALU_overflow_expected_prev;
	end
	if (
		( ALU_result_expected_prev[0] !== 1'bx ) && ( ALU_result_prev[0] !== ALU_result_expected_prev[0] )
		&& ((ALU_result_expected_prev[0] !== last_ALU_result_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_result_exp[0] = ALU_result_expected_prev[0];
	end
	if (
		( ALU_result_expected_prev[1] !== 1'bx ) && ( ALU_result_prev[1] !== ALU_result_expected_prev[1] )
		&& ((ALU_result_expected_prev[1] !== last_ALU_result_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_result_exp[1] = ALU_result_expected_prev[1];
	end
	if (
		( ALU_result_expected_prev[2] !== 1'bx ) && ( ALU_result_prev[2] !== ALU_result_expected_prev[2] )
		&& ((ALU_result_expected_prev[2] !== last_ALU_result_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_result_exp[2] = ALU_result_expected_prev[2];
	end
	if (
		( ALU_result_expected_prev[3] !== 1'bx ) && ( ALU_result_prev[3] !== ALU_result_expected_prev[3] )
		&& ((ALU_result_expected_prev[3] !== last_ALU_result_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_result_exp[3] = ALU_result_expected_prev[3];
	end
	if (
		( ALU_result_expected_prev[4] !== 1'bx ) && ( ALU_result_prev[4] !== ALU_result_expected_prev[4] )
		&& ((ALU_result_expected_prev[4] !== last_ALU_result_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_result_exp[4] = ALU_result_expected_prev[4];
	end
	if (
		( ALU_result_expected_prev[5] !== 1'bx ) && ( ALU_result_prev[5] !== ALU_result_expected_prev[5] )
		&& ((ALU_result_expected_prev[5] !== last_ALU_result_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_result_exp[5] = ALU_result_expected_prev[5];
	end
	if (
		( ALU_result_expected_prev[6] !== 1'bx ) && ( ALU_result_prev[6] !== ALU_result_expected_prev[6] )
		&& ((ALU_result_expected_prev[6] !== last_ALU_result_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_result_exp[6] = ALU_result_expected_prev[6];
	end
	if (
		( ALU_result_expected_prev[7] !== 1'bx ) && ( ALU_result_prev[7] !== ALU_result_expected_prev[7] )
		&& ((ALU_result_expected_prev[7] !== last_ALU_result_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_result_expected_prev);
		$display ("     Real value = %b", ALU_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_result_exp[7] = ALU_result_expected_prev[7];
	end
	if (
		( ALU_zero_expected_prev !== 1'bx ) && ( ALU_zero_prev !== ALU_zero_expected_prev )
		&& ((ALU_zero_expected_prev !== last_ALU_zero_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_zero_expected_prev);
		$display ("     Real value = %b", ALU_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALU_zero_exp = ALU_zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module component_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] ALU_funct;
reg [5:0] ALU_op;
reg [4:0] ALU_shamt;
reg ALU_src;
reg [31:0] PC_branch_offset;
reg [7:0] REG_data1;
reg [7:0] REG_data2;
// wires                                               
wire ALU_c_out;
wire ALU_overflow;
wire [7:0] ALU_result;
wire ALU_zero;

wire sampler;                             

// assign statements (if any)                          
component_test i1 (
// port map - connection between master ports and signals/registers   
	.ALU_c_out(ALU_c_out),
	.ALU_funct(ALU_funct),
	.ALU_op(ALU_op),
	.ALU_overflow(ALU_overflow),
	.ALU_result(ALU_result),
	.ALU_shamt(ALU_shamt),
	.ALU_src(ALU_src),
	.ALU_zero(ALU_zero),
	.PC_branch_offset(PC_branch_offset),
	.REG_data1(REG_data1),
	.REG_data2(REG_data2)
);
// ALU_funct[ 5 ]
initial
begin
	ALU_funct[5] = 1'b0;
end 
// ALU_funct[ 4 ]
initial
begin
	ALU_funct[4] = 1'b0;
end 
// ALU_funct[ 3 ]
initial
begin
	ALU_funct[3] = 1'b0;
	ALU_funct[3] = #320000 1'b1;
	ALU_funct[3] = #80000 1'b0;
end 
// ALU_funct[ 2 ]
initial
begin
	ALU_funct[2] = 1'b0;
	ALU_funct[2] = #160000 1'b1;
	ALU_funct[2] = #160000 1'b0;
end 
// ALU_funct[ 1 ]
initial
begin
	ALU_funct[1] = 1'b0;
	ALU_funct[1] = #80000 1'b1;
	ALU_funct[1] = #80000 1'b0;
	ALU_funct[1] = #160000 1'b1;
	ALU_funct[1] = #80000 1'b0;
end 
// ALU_funct[ 0 ]
initial
begin
	ALU_funct[0] = 1'b0;
	ALU_funct[0] = #240000 1'b1;
	ALU_funct[0] = #80000 1'b0;
end 
// ALU_op[ 5 ]
initial
begin
	ALU_op[5] = 1'b0;
end 
// ALU_op[ 4 ]
initial
begin
	ALU_op[4] = 1'b0;
end 
// ALU_op[ 3 ]
initial
begin
	ALU_op[3] = 1'b0;
end 
// ALU_op[ 2 ]
initial
begin
	ALU_op[2] = 1'b0;
end 
// ALU_op[ 1 ]
initial
begin
	ALU_op[1] = 1'b1;
	ALU_op[1] = #400000 1'b0;
end 
// ALU_op[ 0 ]
initial
begin
	ALU_op[0] = 1'b0;
	ALU_op[0] = #560000 1'b1;
	ALU_op[0] = #160000 1'b0;
end 
// ALU_shamt[ 4 ]
initial
begin
	ALU_shamt[4] = 1'b0;
end 
// ALU_shamt[ 3 ]
initial
begin
	ALU_shamt[3] = 1'b0;
end 
// ALU_shamt[ 2 ]
initial
begin
	ALU_shamt[2] = 1'b0;
end 
// ALU_shamt[ 1 ]
initial
begin
	ALU_shamt[1] = 1'b0;
end 
// ALU_shamt[ 0 ]
initial
begin
	ALU_shamt[0] = 1'b0;
end 

// ALU_src
initial
begin
	ALU_src = 1'b0;
end 
// PC_branch_offset[ 31 ]
initial
begin
	PC_branch_offset[31] = 1'b0;
end 
// PC_branch_offset[ 30 ]
initial
begin
	PC_branch_offset[30] = 1'b0;
end 
// PC_branch_offset[ 29 ]
initial
begin
	PC_branch_offset[29] = 1'b0;
end 
// PC_branch_offset[ 28 ]
initial
begin
	PC_branch_offset[28] = 1'b0;
end 
// PC_branch_offset[ 27 ]
initial
begin
	PC_branch_offset[27] = 1'b0;
end 
// PC_branch_offset[ 26 ]
initial
begin
	PC_branch_offset[26] = 1'b0;
end 
// PC_branch_offset[ 25 ]
initial
begin
	PC_branch_offset[25] = 1'b0;
end 
// PC_branch_offset[ 24 ]
initial
begin
	PC_branch_offset[24] = 1'b0;
end 
// PC_branch_offset[ 23 ]
initial
begin
	PC_branch_offset[23] = 1'b0;
end 
// PC_branch_offset[ 22 ]
initial
begin
	PC_branch_offset[22] = 1'b0;
end 
// PC_branch_offset[ 21 ]
initial
begin
	PC_branch_offset[21] = 1'b0;
end 
// PC_branch_offset[ 20 ]
initial
begin
	PC_branch_offset[20] = 1'b0;
end 
// PC_branch_offset[ 19 ]
initial
begin
	PC_branch_offset[19] = 1'b0;
end 
// PC_branch_offset[ 18 ]
initial
begin
	PC_branch_offset[18] = 1'b0;
end 
// PC_branch_offset[ 17 ]
initial
begin
	PC_branch_offset[17] = 1'b0;
end 
// PC_branch_offset[ 16 ]
initial
begin
	PC_branch_offset[16] = 1'b0;
end 
// PC_branch_offset[ 15 ]
initial
begin
	PC_branch_offset[15] = 1'b0;
end 
// PC_branch_offset[ 14 ]
initial
begin
	PC_branch_offset[14] = 1'b0;
end 
// PC_branch_offset[ 13 ]
initial
begin
	PC_branch_offset[13] = 1'b0;
end 
// PC_branch_offset[ 12 ]
initial
begin
	PC_branch_offset[12] = 1'b0;
end 
// PC_branch_offset[ 11 ]
initial
begin
	PC_branch_offset[11] = 1'b0;
end 
// PC_branch_offset[ 10 ]
initial
begin
	PC_branch_offset[10] = 1'b0;
end 
// PC_branch_offset[ 9 ]
initial
begin
	PC_branch_offset[9] = 1'b0;
end 
// PC_branch_offset[ 8 ]
initial
begin
	PC_branch_offset[8] = 1'b0;
end 
// PC_branch_offset[ 7 ]
initial
begin
	PC_branch_offset[7] = 1'b1;
end 
// PC_branch_offset[ 6 ]
initial
begin
	PC_branch_offset[6] = 1'b1;
end 
// PC_branch_offset[ 5 ]
initial
begin
	PC_branch_offset[5] = 1'b0;
end 
// PC_branch_offset[ 4 ]
initial
begin
	PC_branch_offset[4] = 1'b0;
end 
// PC_branch_offset[ 3 ]
initial
begin
	PC_branch_offset[3] = 1'b0;
end 
// PC_branch_offset[ 2 ]
initial
begin
	PC_branch_offset[2] = 1'b1;
end 
// PC_branch_offset[ 1 ]
initial
begin
	PC_branch_offset[1] = 1'b0;
end 
// PC_branch_offset[ 0 ]
initial
begin
	PC_branch_offset[0] = 1'b0;
end 
// REG_data1[ 7 ]
initial
begin
	REG_data1[7] = 1'b0;
end 
// REG_data1[ 6 ]
initial
begin
	REG_data1[6] = 1'b0;
end 
// REG_data1[ 5 ]
initial
begin
	REG_data1[5] = 1'b1;
end 
// REG_data1[ 4 ]
initial
begin
	REG_data1[4] = 1'b1;
end 
// REG_data1[ 3 ]
initial
begin
	REG_data1[3] = 1'b1;
end 
// REG_data1[ 2 ]
initial
begin
	REG_data1[2] = 1'b0;
end 
// REG_data1[ 1 ]
initial
begin
	REG_data1[1] = 1'b1;
end 
// REG_data1[ 0 ]
initial
begin
	REG_data1[0] = 1'b0;
end 
// REG_data2[ 7 ]
initial
begin
	REG_data2[7] = 1'b1;
end 
// REG_data2[ 6 ]
initial
begin
	REG_data2[6] = 1'b1;
end 
// REG_data2[ 5 ]
initial
begin
	REG_data2[5] = 1'b1;
end 
// REG_data2[ 4 ]
initial
begin
	REG_data2[4] = 1'b1;
end 
// REG_data2[ 3 ]
initial
begin
	REG_data2[3] = 1'b0;
end 
// REG_data2[ 2 ]
initial
begin
	REG_data2[2] = 1'b0;
end 
// REG_data2[ 1 ]
initial
begin
	REG_data2[1] = 1'b0;
end 
// REG_data2[ 0 ]
initial
begin
	REG_data2[0] = 1'b1;
end 

component_test_vlg_sample_tst tb_sample (
	.ALU_funct(ALU_funct),
	.ALU_op(ALU_op),
	.ALU_shamt(ALU_shamt),
	.ALU_src(ALU_src),
	.PC_branch_offset(PC_branch_offset),
	.REG_data1(REG_data1),
	.REG_data2(REG_data2),
	.sampler_tx(sampler)
);

component_test_vlg_check_tst tb_out(
	.ALU_c_out(ALU_c_out),
	.ALU_overflow(ALU_overflow),
	.ALU_result(ALU_result),
	.ALU_zero(ALU_zero),
	.sampler_rx(sampler)
);
endmodule

