// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/06/2024 17:02:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top_level
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_level_vlg_sample_tst(
	clk,
	global_reset,
	reg1_adr,
	reg2_adr,
	write_adr,
	write_data,
	write_en,
	sampler_tx
);
input  clk;
input  global_reset;
input [4:0] reg1_adr;
input [4:0] reg2_adr;
input [4:0] write_adr;
input [31:0] write_data;
input  write_en;
output sampler_tx;

reg sample;
time current_time;
always @(clk or global_reset or reg1_adr or reg2_adr or write_adr or write_data or write_en)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_level_vlg_check_tst (
	reg1_data,
	reg2_data,
	sampler_rx
);
input [31:0] reg1_data;
input [31:0] reg2_data;
input sampler_rx;

reg [31:0] reg1_data_expected;
reg [31:0] reg2_data_expected;

reg [31:0] reg1_data_prev;
reg [31:0] reg2_data_prev;

reg [31:0] reg1_data_expected_prev;
reg [31:0] reg2_data_expected_prev;

reg [31:0] last_reg1_data_exp;
reg [31:0] last_reg2_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	reg1_data_prev = reg1_data;
	reg2_data_prev = reg2_data;
end

// update expected /o prevs

always @(trigger)
begin
	reg1_data_expected_prev = reg1_data_expected;
	reg2_data_expected_prev = reg2_data_expected;
end


// expected reg1_data[ 31 ]
initial
begin
	reg1_data_expected[31] = 1'bX;
end 
// expected reg1_data[ 30 ]
initial
begin
	reg1_data_expected[30] = 1'bX;
end 
// expected reg1_data[ 29 ]
initial
begin
	reg1_data_expected[29] = 1'bX;
end 
// expected reg1_data[ 28 ]
initial
begin
	reg1_data_expected[28] = 1'bX;
end 
// expected reg1_data[ 27 ]
initial
begin
	reg1_data_expected[27] = 1'bX;
end 
// expected reg1_data[ 26 ]
initial
begin
	reg1_data_expected[26] = 1'bX;
end 
// expected reg1_data[ 25 ]
initial
begin
	reg1_data_expected[25] = 1'bX;
end 
// expected reg1_data[ 24 ]
initial
begin
	reg1_data_expected[24] = 1'bX;
end 
// expected reg1_data[ 23 ]
initial
begin
	reg1_data_expected[23] = 1'bX;
end 
// expected reg1_data[ 22 ]
initial
begin
	reg1_data_expected[22] = 1'bX;
end 
// expected reg1_data[ 21 ]
initial
begin
	reg1_data_expected[21] = 1'bX;
end 
// expected reg1_data[ 20 ]
initial
begin
	reg1_data_expected[20] = 1'bX;
end 
// expected reg1_data[ 19 ]
initial
begin
	reg1_data_expected[19] = 1'bX;
end 
// expected reg1_data[ 18 ]
initial
begin
	reg1_data_expected[18] = 1'bX;
end 
// expected reg1_data[ 17 ]
initial
begin
	reg1_data_expected[17] = 1'bX;
end 
// expected reg1_data[ 16 ]
initial
begin
	reg1_data_expected[16] = 1'bX;
end 
// expected reg1_data[ 15 ]
initial
begin
	reg1_data_expected[15] = 1'bX;
end 
// expected reg1_data[ 14 ]
initial
begin
	reg1_data_expected[14] = 1'bX;
end 
// expected reg1_data[ 13 ]
initial
begin
	reg1_data_expected[13] = 1'bX;
end 
// expected reg1_data[ 12 ]
initial
begin
	reg1_data_expected[12] = 1'bX;
end 
// expected reg1_data[ 11 ]
initial
begin
	reg1_data_expected[11] = 1'bX;
end 
// expected reg1_data[ 10 ]
initial
begin
	reg1_data_expected[10] = 1'bX;
end 
// expected reg1_data[ 9 ]
initial
begin
	reg1_data_expected[9] = 1'bX;
end 
// expected reg1_data[ 8 ]
initial
begin
	reg1_data_expected[8] = 1'bX;
end 
// expected reg1_data[ 7 ]
initial
begin
	reg1_data_expected[7] = 1'bX;
end 
// expected reg1_data[ 6 ]
initial
begin
	reg1_data_expected[6] = 1'bX;
end 
// expected reg1_data[ 5 ]
initial
begin
	reg1_data_expected[5] = 1'bX;
end 
// expected reg1_data[ 4 ]
initial
begin
	reg1_data_expected[4] = 1'bX;
end 
// expected reg1_data[ 3 ]
initial
begin
	reg1_data_expected[3] = 1'bX;
end 
// expected reg1_data[ 2 ]
initial
begin
	reg1_data_expected[2] = 1'bX;
end 
// expected reg1_data[ 1 ]
initial
begin
	reg1_data_expected[1] = 1'bX;
end 
// expected reg1_data[ 0 ]
initial
begin
	reg1_data_expected[0] = 1'bX;
end 
// expected reg2_data[ 31 ]
initial
begin
	reg2_data_expected[31] = 1'bX;
end 
// expected reg2_data[ 30 ]
initial
begin
	reg2_data_expected[30] = 1'bX;
end 
// expected reg2_data[ 29 ]
initial
begin
	reg2_data_expected[29] = 1'bX;
end 
// expected reg2_data[ 28 ]
initial
begin
	reg2_data_expected[28] = 1'bX;
end 
// expected reg2_data[ 27 ]
initial
begin
	reg2_data_expected[27] = 1'bX;
end 
// expected reg2_data[ 26 ]
initial
begin
	reg2_data_expected[26] = 1'bX;
end 
// expected reg2_data[ 25 ]
initial
begin
	reg2_data_expected[25] = 1'bX;
end 
// expected reg2_data[ 24 ]
initial
begin
	reg2_data_expected[24] = 1'bX;
end 
// expected reg2_data[ 23 ]
initial
begin
	reg2_data_expected[23] = 1'bX;
end 
// expected reg2_data[ 22 ]
initial
begin
	reg2_data_expected[22] = 1'bX;
end 
// expected reg2_data[ 21 ]
initial
begin
	reg2_data_expected[21] = 1'bX;
end 
// expected reg2_data[ 20 ]
initial
begin
	reg2_data_expected[20] = 1'bX;
end 
// expected reg2_data[ 19 ]
initial
begin
	reg2_data_expected[19] = 1'bX;
end 
// expected reg2_data[ 18 ]
initial
begin
	reg2_data_expected[18] = 1'bX;
end 
// expected reg2_data[ 17 ]
initial
begin
	reg2_data_expected[17] = 1'bX;
end 
// expected reg2_data[ 16 ]
initial
begin
	reg2_data_expected[16] = 1'bX;
end 
// expected reg2_data[ 15 ]
initial
begin
	reg2_data_expected[15] = 1'bX;
end 
// expected reg2_data[ 14 ]
initial
begin
	reg2_data_expected[14] = 1'bX;
end 
// expected reg2_data[ 13 ]
initial
begin
	reg2_data_expected[13] = 1'bX;
end 
// expected reg2_data[ 12 ]
initial
begin
	reg2_data_expected[12] = 1'bX;
end 
// expected reg2_data[ 11 ]
initial
begin
	reg2_data_expected[11] = 1'bX;
end 
// expected reg2_data[ 10 ]
initial
begin
	reg2_data_expected[10] = 1'bX;
end 
// expected reg2_data[ 9 ]
initial
begin
	reg2_data_expected[9] = 1'bX;
end 
// expected reg2_data[ 8 ]
initial
begin
	reg2_data_expected[8] = 1'bX;
end 
// expected reg2_data[ 7 ]
initial
begin
	reg2_data_expected[7] = 1'bX;
end 
// expected reg2_data[ 6 ]
initial
begin
	reg2_data_expected[6] = 1'bX;
end 
// expected reg2_data[ 5 ]
initial
begin
	reg2_data_expected[5] = 1'bX;
end 
// expected reg2_data[ 4 ]
initial
begin
	reg2_data_expected[4] = 1'bX;
end 
// expected reg2_data[ 3 ]
initial
begin
	reg2_data_expected[3] = 1'bX;
end 
// expected reg2_data[ 2 ]
initial
begin
	reg2_data_expected[2] = 1'bX;
end 
// expected reg2_data[ 1 ]
initial
begin
	reg2_data_expected[1] = 1'bX;
end 
// expected reg2_data[ 0 ]
initial
begin
	reg2_data_expected[0] = 1'bX;
end 
// generate trigger
always @(reg1_data_expected or reg1_data or reg2_data_expected or reg2_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected reg1_data = %b | expected reg2_data = %b | ",reg1_data_expected_prev,reg2_data_expected_prev);
	$display("| real reg1_data = %b | real reg2_data = %b | ",reg1_data_prev,reg2_data_prev);
`endif
	if (
		( reg1_data_expected_prev[0] !== 1'bx ) && ( reg1_data_prev[0] !== reg1_data_expected_prev[0] )
		&& ((reg1_data_expected_prev[0] !== last_reg1_data_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[0] = reg1_data_expected_prev[0];
	end
	if (
		( reg1_data_expected_prev[1] !== 1'bx ) && ( reg1_data_prev[1] !== reg1_data_expected_prev[1] )
		&& ((reg1_data_expected_prev[1] !== last_reg1_data_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[1] = reg1_data_expected_prev[1];
	end
	if (
		( reg1_data_expected_prev[2] !== 1'bx ) && ( reg1_data_prev[2] !== reg1_data_expected_prev[2] )
		&& ((reg1_data_expected_prev[2] !== last_reg1_data_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[2] = reg1_data_expected_prev[2];
	end
	if (
		( reg1_data_expected_prev[3] !== 1'bx ) && ( reg1_data_prev[3] !== reg1_data_expected_prev[3] )
		&& ((reg1_data_expected_prev[3] !== last_reg1_data_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[3] = reg1_data_expected_prev[3];
	end
	if (
		( reg1_data_expected_prev[4] !== 1'bx ) && ( reg1_data_prev[4] !== reg1_data_expected_prev[4] )
		&& ((reg1_data_expected_prev[4] !== last_reg1_data_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[4] = reg1_data_expected_prev[4];
	end
	if (
		( reg1_data_expected_prev[5] !== 1'bx ) && ( reg1_data_prev[5] !== reg1_data_expected_prev[5] )
		&& ((reg1_data_expected_prev[5] !== last_reg1_data_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[5] = reg1_data_expected_prev[5];
	end
	if (
		( reg1_data_expected_prev[6] !== 1'bx ) && ( reg1_data_prev[6] !== reg1_data_expected_prev[6] )
		&& ((reg1_data_expected_prev[6] !== last_reg1_data_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[6] = reg1_data_expected_prev[6];
	end
	if (
		( reg1_data_expected_prev[7] !== 1'bx ) && ( reg1_data_prev[7] !== reg1_data_expected_prev[7] )
		&& ((reg1_data_expected_prev[7] !== last_reg1_data_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[7] = reg1_data_expected_prev[7];
	end
	if (
		( reg1_data_expected_prev[8] !== 1'bx ) && ( reg1_data_prev[8] !== reg1_data_expected_prev[8] )
		&& ((reg1_data_expected_prev[8] !== last_reg1_data_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[8] = reg1_data_expected_prev[8];
	end
	if (
		( reg1_data_expected_prev[9] !== 1'bx ) && ( reg1_data_prev[9] !== reg1_data_expected_prev[9] )
		&& ((reg1_data_expected_prev[9] !== last_reg1_data_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[9] = reg1_data_expected_prev[9];
	end
	if (
		( reg1_data_expected_prev[10] !== 1'bx ) && ( reg1_data_prev[10] !== reg1_data_expected_prev[10] )
		&& ((reg1_data_expected_prev[10] !== last_reg1_data_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[10] = reg1_data_expected_prev[10];
	end
	if (
		( reg1_data_expected_prev[11] !== 1'bx ) && ( reg1_data_prev[11] !== reg1_data_expected_prev[11] )
		&& ((reg1_data_expected_prev[11] !== last_reg1_data_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[11] = reg1_data_expected_prev[11];
	end
	if (
		( reg1_data_expected_prev[12] !== 1'bx ) && ( reg1_data_prev[12] !== reg1_data_expected_prev[12] )
		&& ((reg1_data_expected_prev[12] !== last_reg1_data_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[12] = reg1_data_expected_prev[12];
	end
	if (
		( reg1_data_expected_prev[13] !== 1'bx ) && ( reg1_data_prev[13] !== reg1_data_expected_prev[13] )
		&& ((reg1_data_expected_prev[13] !== last_reg1_data_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[13] = reg1_data_expected_prev[13];
	end
	if (
		( reg1_data_expected_prev[14] !== 1'bx ) && ( reg1_data_prev[14] !== reg1_data_expected_prev[14] )
		&& ((reg1_data_expected_prev[14] !== last_reg1_data_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[14] = reg1_data_expected_prev[14];
	end
	if (
		( reg1_data_expected_prev[15] !== 1'bx ) && ( reg1_data_prev[15] !== reg1_data_expected_prev[15] )
		&& ((reg1_data_expected_prev[15] !== last_reg1_data_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[15] = reg1_data_expected_prev[15];
	end
	if (
		( reg1_data_expected_prev[16] !== 1'bx ) && ( reg1_data_prev[16] !== reg1_data_expected_prev[16] )
		&& ((reg1_data_expected_prev[16] !== last_reg1_data_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[16] = reg1_data_expected_prev[16];
	end
	if (
		( reg1_data_expected_prev[17] !== 1'bx ) && ( reg1_data_prev[17] !== reg1_data_expected_prev[17] )
		&& ((reg1_data_expected_prev[17] !== last_reg1_data_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[17] = reg1_data_expected_prev[17];
	end
	if (
		( reg1_data_expected_prev[18] !== 1'bx ) && ( reg1_data_prev[18] !== reg1_data_expected_prev[18] )
		&& ((reg1_data_expected_prev[18] !== last_reg1_data_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[18] = reg1_data_expected_prev[18];
	end
	if (
		( reg1_data_expected_prev[19] !== 1'bx ) && ( reg1_data_prev[19] !== reg1_data_expected_prev[19] )
		&& ((reg1_data_expected_prev[19] !== last_reg1_data_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[19] = reg1_data_expected_prev[19];
	end
	if (
		( reg1_data_expected_prev[20] !== 1'bx ) && ( reg1_data_prev[20] !== reg1_data_expected_prev[20] )
		&& ((reg1_data_expected_prev[20] !== last_reg1_data_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[20] = reg1_data_expected_prev[20];
	end
	if (
		( reg1_data_expected_prev[21] !== 1'bx ) && ( reg1_data_prev[21] !== reg1_data_expected_prev[21] )
		&& ((reg1_data_expected_prev[21] !== last_reg1_data_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[21] = reg1_data_expected_prev[21];
	end
	if (
		( reg1_data_expected_prev[22] !== 1'bx ) && ( reg1_data_prev[22] !== reg1_data_expected_prev[22] )
		&& ((reg1_data_expected_prev[22] !== last_reg1_data_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[22] = reg1_data_expected_prev[22];
	end
	if (
		( reg1_data_expected_prev[23] !== 1'bx ) && ( reg1_data_prev[23] !== reg1_data_expected_prev[23] )
		&& ((reg1_data_expected_prev[23] !== last_reg1_data_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[23] = reg1_data_expected_prev[23];
	end
	if (
		( reg1_data_expected_prev[24] !== 1'bx ) && ( reg1_data_prev[24] !== reg1_data_expected_prev[24] )
		&& ((reg1_data_expected_prev[24] !== last_reg1_data_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[24] = reg1_data_expected_prev[24];
	end
	if (
		( reg1_data_expected_prev[25] !== 1'bx ) && ( reg1_data_prev[25] !== reg1_data_expected_prev[25] )
		&& ((reg1_data_expected_prev[25] !== last_reg1_data_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[25] = reg1_data_expected_prev[25];
	end
	if (
		( reg1_data_expected_prev[26] !== 1'bx ) && ( reg1_data_prev[26] !== reg1_data_expected_prev[26] )
		&& ((reg1_data_expected_prev[26] !== last_reg1_data_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[26] = reg1_data_expected_prev[26];
	end
	if (
		( reg1_data_expected_prev[27] !== 1'bx ) && ( reg1_data_prev[27] !== reg1_data_expected_prev[27] )
		&& ((reg1_data_expected_prev[27] !== last_reg1_data_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[27] = reg1_data_expected_prev[27];
	end
	if (
		( reg1_data_expected_prev[28] !== 1'bx ) && ( reg1_data_prev[28] !== reg1_data_expected_prev[28] )
		&& ((reg1_data_expected_prev[28] !== last_reg1_data_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[28] = reg1_data_expected_prev[28];
	end
	if (
		( reg1_data_expected_prev[29] !== 1'bx ) && ( reg1_data_prev[29] !== reg1_data_expected_prev[29] )
		&& ((reg1_data_expected_prev[29] !== last_reg1_data_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[29] = reg1_data_expected_prev[29];
	end
	if (
		( reg1_data_expected_prev[30] !== 1'bx ) && ( reg1_data_prev[30] !== reg1_data_expected_prev[30] )
		&& ((reg1_data_expected_prev[30] !== last_reg1_data_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[30] = reg1_data_expected_prev[30];
	end
	if (
		( reg1_data_expected_prev[31] !== 1'bx ) && ( reg1_data_prev[31] !== reg1_data_expected_prev[31] )
		&& ((reg1_data_expected_prev[31] !== last_reg1_data_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_data[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_data_expected_prev);
		$display ("     Real value = %b", reg1_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_reg1_data_exp[31] = reg1_data_expected_prev[31];
	end
	if (
		( reg2_data_expected_prev[0] !== 1'bx ) && ( reg2_data_prev[0] !== reg2_data_expected_prev[0] )
		&& ((reg2_data_expected_prev[0] !== last_reg2_data_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[0] = reg2_data_expected_prev[0];
	end
	if (
		( reg2_data_expected_prev[1] !== 1'bx ) && ( reg2_data_prev[1] !== reg2_data_expected_prev[1] )
		&& ((reg2_data_expected_prev[1] !== last_reg2_data_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[1] = reg2_data_expected_prev[1];
	end
	if (
		( reg2_data_expected_prev[2] !== 1'bx ) && ( reg2_data_prev[2] !== reg2_data_expected_prev[2] )
		&& ((reg2_data_expected_prev[2] !== last_reg2_data_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[2] = reg2_data_expected_prev[2];
	end
	if (
		( reg2_data_expected_prev[3] !== 1'bx ) && ( reg2_data_prev[3] !== reg2_data_expected_prev[3] )
		&& ((reg2_data_expected_prev[3] !== last_reg2_data_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[3] = reg2_data_expected_prev[3];
	end
	if (
		( reg2_data_expected_prev[4] !== 1'bx ) && ( reg2_data_prev[4] !== reg2_data_expected_prev[4] )
		&& ((reg2_data_expected_prev[4] !== last_reg2_data_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[4] = reg2_data_expected_prev[4];
	end
	if (
		( reg2_data_expected_prev[5] !== 1'bx ) && ( reg2_data_prev[5] !== reg2_data_expected_prev[5] )
		&& ((reg2_data_expected_prev[5] !== last_reg2_data_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[5] = reg2_data_expected_prev[5];
	end
	if (
		( reg2_data_expected_prev[6] !== 1'bx ) && ( reg2_data_prev[6] !== reg2_data_expected_prev[6] )
		&& ((reg2_data_expected_prev[6] !== last_reg2_data_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[6] = reg2_data_expected_prev[6];
	end
	if (
		( reg2_data_expected_prev[7] !== 1'bx ) && ( reg2_data_prev[7] !== reg2_data_expected_prev[7] )
		&& ((reg2_data_expected_prev[7] !== last_reg2_data_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[7] = reg2_data_expected_prev[7];
	end
	if (
		( reg2_data_expected_prev[8] !== 1'bx ) && ( reg2_data_prev[8] !== reg2_data_expected_prev[8] )
		&& ((reg2_data_expected_prev[8] !== last_reg2_data_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[8] = reg2_data_expected_prev[8];
	end
	if (
		( reg2_data_expected_prev[9] !== 1'bx ) && ( reg2_data_prev[9] !== reg2_data_expected_prev[9] )
		&& ((reg2_data_expected_prev[9] !== last_reg2_data_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[9] = reg2_data_expected_prev[9];
	end
	if (
		( reg2_data_expected_prev[10] !== 1'bx ) && ( reg2_data_prev[10] !== reg2_data_expected_prev[10] )
		&& ((reg2_data_expected_prev[10] !== last_reg2_data_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[10] = reg2_data_expected_prev[10];
	end
	if (
		( reg2_data_expected_prev[11] !== 1'bx ) && ( reg2_data_prev[11] !== reg2_data_expected_prev[11] )
		&& ((reg2_data_expected_prev[11] !== last_reg2_data_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[11] = reg2_data_expected_prev[11];
	end
	if (
		( reg2_data_expected_prev[12] !== 1'bx ) && ( reg2_data_prev[12] !== reg2_data_expected_prev[12] )
		&& ((reg2_data_expected_prev[12] !== last_reg2_data_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[12] = reg2_data_expected_prev[12];
	end
	if (
		( reg2_data_expected_prev[13] !== 1'bx ) && ( reg2_data_prev[13] !== reg2_data_expected_prev[13] )
		&& ((reg2_data_expected_prev[13] !== last_reg2_data_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[13] = reg2_data_expected_prev[13];
	end
	if (
		( reg2_data_expected_prev[14] !== 1'bx ) && ( reg2_data_prev[14] !== reg2_data_expected_prev[14] )
		&& ((reg2_data_expected_prev[14] !== last_reg2_data_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[14] = reg2_data_expected_prev[14];
	end
	if (
		( reg2_data_expected_prev[15] !== 1'bx ) && ( reg2_data_prev[15] !== reg2_data_expected_prev[15] )
		&& ((reg2_data_expected_prev[15] !== last_reg2_data_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[15] = reg2_data_expected_prev[15];
	end
	if (
		( reg2_data_expected_prev[16] !== 1'bx ) && ( reg2_data_prev[16] !== reg2_data_expected_prev[16] )
		&& ((reg2_data_expected_prev[16] !== last_reg2_data_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[16] = reg2_data_expected_prev[16];
	end
	if (
		( reg2_data_expected_prev[17] !== 1'bx ) && ( reg2_data_prev[17] !== reg2_data_expected_prev[17] )
		&& ((reg2_data_expected_prev[17] !== last_reg2_data_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[17] = reg2_data_expected_prev[17];
	end
	if (
		( reg2_data_expected_prev[18] !== 1'bx ) && ( reg2_data_prev[18] !== reg2_data_expected_prev[18] )
		&& ((reg2_data_expected_prev[18] !== last_reg2_data_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[18] = reg2_data_expected_prev[18];
	end
	if (
		( reg2_data_expected_prev[19] !== 1'bx ) && ( reg2_data_prev[19] !== reg2_data_expected_prev[19] )
		&& ((reg2_data_expected_prev[19] !== last_reg2_data_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[19] = reg2_data_expected_prev[19];
	end
	if (
		( reg2_data_expected_prev[20] !== 1'bx ) && ( reg2_data_prev[20] !== reg2_data_expected_prev[20] )
		&& ((reg2_data_expected_prev[20] !== last_reg2_data_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[20] = reg2_data_expected_prev[20];
	end
	if (
		( reg2_data_expected_prev[21] !== 1'bx ) && ( reg2_data_prev[21] !== reg2_data_expected_prev[21] )
		&& ((reg2_data_expected_prev[21] !== last_reg2_data_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[21] = reg2_data_expected_prev[21];
	end
	if (
		( reg2_data_expected_prev[22] !== 1'bx ) && ( reg2_data_prev[22] !== reg2_data_expected_prev[22] )
		&& ((reg2_data_expected_prev[22] !== last_reg2_data_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[22] = reg2_data_expected_prev[22];
	end
	if (
		( reg2_data_expected_prev[23] !== 1'bx ) && ( reg2_data_prev[23] !== reg2_data_expected_prev[23] )
		&& ((reg2_data_expected_prev[23] !== last_reg2_data_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[23] = reg2_data_expected_prev[23];
	end
	if (
		( reg2_data_expected_prev[24] !== 1'bx ) && ( reg2_data_prev[24] !== reg2_data_expected_prev[24] )
		&& ((reg2_data_expected_prev[24] !== last_reg2_data_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[24] = reg2_data_expected_prev[24];
	end
	if (
		( reg2_data_expected_prev[25] !== 1'bx ) && ( reg2_data_prev[25] !== reg2_data_expected_prev[25] )
		&& ((reg2_data_expected_prev[25] !== last_reg2_data_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[25] = reg2_data_expected_prev[25];
	end
	if (
		( reg2_data_expected_prev[26] !== 1'bx ) && ( reg2_data_prev[26] !== reg2_data_expected_prev[26] )
		&& ((reg2_data_expected_prev[26] !== last_reg2_data_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[26] = reg2_data_expected_prev[26];
	end
	if (
		( reg2_data_expected_prev[27] !== 1'bx ) && ( reg2_data_prev[27] !== reg2_data_expected_prev[27] )
		&& ((reg2_data_expected_prev[27] !== last_reg2_data_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[27] = reg2_data_expected_prev[27];
	end
	if (
		( reg2_data_expected_prev[28] !== 1'bx ) && ( reg2_data_prev[28] !== reg2_data_expected_prev[28] )
		&& ((reg2_data_expected_prev[28] !== last_reg2_data_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[28] = reg2_data_expected_prev[28];
	end
	if (
		( reg2_data_expected_prev[29] !== 1'bx ) && ( reg2_data_prev[29] !== reg2_data_expected_prev[29] )
		&& ((reg2_data_expected_prev[29] !== last_reg2_data_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[29] = reg2_data_expected_prev[29];
	end
	if (
		( reg2_data_expected_prev[30] !== 1'bx ) && ( reg2_data_prev[30] !== reg2_data_expected_prev[30] )
		&& ((reg2_data_expected_prev[30] !== last_reg2_data_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[30] = reg2_data_expected_prev[30];
	end
	if (
		( reg2_data_expected_prev[31] !== 1'bx ) && ( reg2_data_prev[31] !== reg2_data_expected_prev[31] )
		&& ((reg2_data_expected_prev[31] !== last_reg2_data_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_data[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_data_expected_prev);
		$display ("     Real value = %b", reg2_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reg2_data_exp[31] = reg2_data_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_level_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg global_reset;
reg [4:0] reg1_adr;
reg [4:0] reg2_adr;
reg [4:0] write_adr;
reg [31:0] write_data;
reg write_en;
// wires                                               
wire [31:0] reg1_data;
wire [31:0] reg2_data;

wire sampler;                             

// assign statements (if any)                          
top_level i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.global_reset(global_reset),
	.reg1_adr(reg1_adr),
	.reg1_data(reg1_data),
	.reg2_adr(reg2_adr),
	.reg2_data(reg2_data),
	.write_adr(write_adr),
	.write_data(write_data),
	.write_en(write_en)
);

// clk
initial
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	clk = #30000 1'b0;
	clk = #70000 1'b1;
	# 120000;
	repeat(3)
	begin
		clk = 1'b0;
		clk = #120000 1'b1;
		# 120000;
	end
	clk = 1'b0;
end 

// global_reset
initial
begin
	global_reset = 1'b0;
	global_reset = #40000 1'b1;
end 
// reg1_adr[ 4 ]
initial
begin
	reg1_adr[4] = 1'b0;
end 
// reg1_adr[ 3 ]
initial
begin
	reg1_adr[3] = 1'b0;
end 
// reg1_adr[ 2 ]
initial
begin
	reg1_adr[2] = 1'b1;
end 
// reg1_adr[ 1 ]
initial
begin
	reg1_adr[1] = 1'b0;
end 
// reg1_adr[ 0 ]
initial
begin
	reg1_adr[0] = 1'b1;
end 
// reg2_adr[ 4 ]
initial
begin
	reg2_adr[4] = 1'b0;
end 
// reg2_adr[ 3 ]
initial
begin
	reg2_adr[3] = 1'b1;
end 
// reg2_adr[ 2 ]
initial
begin
	reg2_adr[2] = 1'b0;
end 
// reg2_adr[ 1 ]
initial
begin
	reg2_adr[1] = 1'b0;
end 
// reg2_adr[ 0 ]
initial
begin
	reg2_adr[0] = 1'b0;
end 
// write_adr[ 4 ]
initial
begin
	write_adr[4] = 1'b0;
end 
// write_adr[ 3 ]
initial
begin
	write_adr[3] = 1'b0;
	write_adr[3] = #480000 1'b1;
	write_adr[3] = #240000 1'b0;
end 
// write_adr[ 2 ]
initial
begin
	write_adr[2] = 1'b1;
	write_adr[2] = #480000 1'b0;
	write_adr[2] = #240000 1'b1;
end 
// write_adr[ 1 ]
initial
begin
	write_adr[1] = 1'b0;
end 
// write_adr[ 0 ]
initial
begin
	write_adr[0] = 1'b1;
	write_adr[0] = #480000 1'b0;
	write_adr[0] = #240000 1'b1;
end 
// write_data[ 31 ]
initial
begin
	write_data[31] = 1'b0;
	write_data[31] = #480000 1'b1;
end 
// write_data[ 30 ]
initial
begin
	write_data[30] = 1'b1;
	write_data[30] = #720000 1'b0;
end 
// write_data[ 29 ]
initial
begin
	write_data[29] = 1'b1;
	write_data[29] = #720000 1'b0;
end 
// write_data[ 28 ]
initial
begin
	write_data[28] = 1'b0;
	write_data[28] = #480000 1'b1;
	write_data[28] = #240000 1'b0;
end 
// write_data[ 27 ]
initial
begin
	write_data[27] = 1'b1;
	write_data[27] = #720000 1'b0;
	write_data[27] = #240000 1'b1;
end 
// write_data[ 26 ]
initial
begin
	write_data[26] = 1'b0;
	write_data[26] = #240000 1'b1;
	write_data[26] = #240000 1'b0;
	write_data[26] = #480000 1'b1;
end 
// write_data[ 25 ]
initial
begin
	write_data[25] = 1'b1;
	write_data[25] = #240000 1'b0;
	write_data[25] = #720000 1'b1;
end 
// write_data[ 24 ]
initial
begin
	write_data[24] = 1'b1;
	write_data[24] = #240000 1'b0;
	write_data[24] = #240000 1'b1;
	write_data[24] = #480000 1'b0;
end 
// write_data[ 23 ]
initial
begin
	write_data[23] = 1'b1;
	write_data[23] = #480000 1'b0;
end 
// write_data[ 22 ]
initial
begin
	write_data[22] = 1'b1;
	write_data[22] = #240000 1'b0;
	write_data[22] = #720000 1'b1;
end 
// write_data[ 21 ]
initial
begin
	write_data[21] = 1'b1;
	write_data[21] = #240000 1'b0;
end 
// write_data[ 20 ]
initial
begin
	write_data[20] = 1'b0;
end 
// write_data[ 19 ]
initial
begin
	write_data[19] = 1'b0;
	write_data[19] = #240000 1'b1;
end 
// write_data[ 18 ]
initial
begin
	write_data[18] = 1'b1;
	write_data[18] = #240000 1'b0;
	write_data[18] = #240000 1'b1;
	write_data[18] = #480000 1'b0;
end 
// write_data[ 17 ]
initial
begin
	write_data[17] = 1'b1;
	write_data[17] = #240000 1'b0;
	write_data[17] = #240000 1'b1;
	write_data[17] = #240000 1'b0;
end 
// write_data[ 16 ]
initial
begin
	write_data[16] = 1'b0;
	write_data[16] = #240000 1'b1;
	write_data[16] = #240000 1'b0;
	write_data[16] = #240000 1'b1;
	write_data[16] = #240000 1'b0;
end 
// write_data[ 15 ]
initial
begin
	write_data[15] = 1'b0;
	write_data[15] = #720000 1'b1;
	write_data[15] = #240000 1'b0;
end 
// write_data[ 14 ]
initial
begin
	write_data[14] = 1'b0;
	write_data[14] = #240000 1'b1;
	write_data[14] = #240000 1'b0;
end 
// write_data[ 13 ]
initial
begin
	write_data[13] = 1'b1;
	write_data[13] = #240000 1'b0;
	write_data[13] = #240000 1'b1;
	write_data[13] = #240000 1'b0;
	write_data[13] = #240000 1'b1;
end 
// write_data[ 12 ]
initial
begin
	write_data[12] = 1'b1;
	write_data[12] = #480000 1'b0;
	write_data[12] = #240000 1'b1;
	write_data[12] = #240000 1'b0;
end 
// write_data[ 11 ]
initial
begin
	write_data[11] = 1'b1;
	write_data[11] = #480000 1'b0;
	write_data[11] = #240000 1'b1;
	write_data[11] = #240000 1'b0;
end 
// write_data[ 10 ]
initial
begin
	write_data[10] = 1'b1;
	write_data[10] = #240000 1'b0;
	write_data[10] = #480000 1'b1;
end 
// write_data[ 9 ]
initial
begin
	write_data[9] = 1'b1;
	write_data[9] = #240000 1'b0;
	write_data[9] = #240000 1'b1;
end 
// write_data[ 8 ]
initial
begin
	write_data[8] = 1'b1;
	write_data[8] = #480000 1'b0;
	write_data[8] = #480000 1'b1;
end 
// write_data[ 7 ]
initial
begin
	write_data[7] = 1'b1;
	write_data[7] = #240000 1'b0;
end 
// write_data[ 6 ]
initial
begin
	write_data[6] = 1'b1;
	write_data[6] = #240000 1'b0;
	write_data[6] = #240000 1'b1;
end 
// write_data[ 5 ]
initial
begin
	write_data[5] = 1'b1;
	write_data[5] = #960000 1'b0;
end 
// write_data[ 4 ]
initial
begin
	write_data[4] = 1'b0;
	write_data[4] = #240000 1'b1;
	write_data[4] = #480000 1'b0;
end 
// write_data[ 3 ]
initial
begin
	write_data[3] = 1'b1;
end 
// write_data[ 2 ]
initial
begin
	write_data[2] = 1'b0;
	write_data[2] = #240000 1'b1;
end 
// write_data[ 1 ]
initial
begin
	write_data[1] = 1'b1;
	write_data[1] = #960000 1'b0;
end 
// write_data[ 0 ]
initial
begin
	write_data[0] = 1'b1;
	write_data[0] = #720000 1'b0;
	write_data[0] = #240000 1'b1;
end 

// write_en
initial
begin
	write_en = 1'b0;
	write_en = #240000 1'b1;
end 

top_level_vlg_sample_tst tb_sample (
	.clk(clk),
	.global_reset(global_reset),
	.reg1_adr(reg1_adr),
	.reg2_adr(reg2_adr),
	.write_adr(write_adr),
	.write_data(write_data),
	.write_en(write_en),
	.sampler_tx(sampler)
);

top_level_vlg_check_tst tb_out(
	.reg1_data(reg1_data),
	.reg2_data(reg2_data),
	.sampler_rx(sampler)
);
endmodule

